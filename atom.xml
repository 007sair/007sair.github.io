<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chan</title>
  <subtitle>记录前端的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://007sair.github.io/"/>
  <updated>2017-08-25T07:15:22.168Z</updated>
  <id>http://007sair.github.io/</id>
  
  <author>
    <name>chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我又回来啦！</title>
    <link href="http://007sair.github.io/2017/08/22/hello-world/"/>
    <id>http://007sair.github.io/2017/08/22/hello-world/</id>
    <published>2017-08-22T04:05:22.000Z</published>
    <updated>2017-08-25T07:15:22.168Z</updated>
    
    <content type="html"><![CDATA[<p>博客顺利从jekyll转成了<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a>，虽然也踩了很多坑，但很满意~~</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="本地运行博客"><a href="#本地运行博客" class="headerlink" title="本地运行博客"></a>本地运行博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s -g</div></pre></td></tr></table></figure>
<h3 id="发布更新博客"><a href="#发布更新博客" class="headerlink" title="发布更新博客"></a>发布更新博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure>
<h3 id="创建新的页面"><a href="#创建新的页面" class="headerlink" title="创建新的页面"></a>创建新的页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"页面名称"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/zh-cn/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客顺利从jekyll转成了&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;，虽然也踩了很多坑，但很满意~~&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://007sair.github.io/categories/web/"/>
    
    
      <category term="web" scheme="http://007sair.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>flex样式预览工具</title>
    <link href="http://007sair.github.io/2017/07/07/flex-tool/"/>
    <id>http://007sair.github.io/2017/07/07/flex-tool/</id>
    <published>2017-07-06T16:00:00.000Z</published>
    <updated>2017-08-23T01:49:50.357Z</updated>
    
    <content type="html"><![CDATA[<p>add test 123 111 44</p>
<p>最近做项目时老是觉得要不停的查flex属性用法，甚至不爽。一怒之下写了个工具。</p>
<p>传送门：<a href="/demo/flex-too.html" target="_blank">flex-tool</a></p>
]]></content>
    
    <summary type="html">
    
      flex样式预览工具
    
    </summary>
    
      <category term="tool" scheme="http://007sair.github.io/categories/tool/"/>
    
    
      <category term="tool" scheme="http://007sair.github.io/tags/tool/"/>
    
      <category term="flex" scheme="http://007sair.github.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>VSCODE 常用快捷键</title>
    <link href="http://007sair.github.io/2017/07/05/Visual-Studio-Code-CNKEYMAP/"/>
    <id>http://007sair.github.io/2017/07/05/Visual-Studio-Code-CNKEYMAP/</id>
    <published>2017-07-04T16:00:00.000Z</published>
    <updated>2017-08-23T02:10:17.063Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf" target="_blank" rel="external">官方版本</a></p>
</blockquote>
<h2 id="vscode快捷键有5种组合方式"><a href="#vscode快捷键有5种组合方式" class="headerlink" title="vscode快捷键有5种组合方式"></a>vscode快捷键有5种组合方式</h2><ol>
<li><code>Ctrl+Shift+?</code> 常规组合</li>
<li><code>Ctrl+K F</code> 先组合后单键组合方式</li>
<li><code>Ctrl+V Ctrl+V</code> 同时依赖一个按键的组合</li>
<li><code>Alt+mouseClick</code> 按键+鼠标点击</li>
<li><code>Alt+mouseDrag</code> 按键+鼠标拖拽</li>
</ol>
<h2 id="全局命令面板"><a href="#全局命令面板" class="headerlink" title="全局命令面板"></a>全局命令面板</h2><p><code>Ctrl+Shift+P/F1</code> 展示全局命令面板</p>
<h2 id="Ctrl-P-模式"><a href="#Ctrl-P-模式" class="headerlink" title="Ctrl+P 模式"></a>Ctrl+P 模式</h2><p>在<code>Ctrl+P</code>下输入<code>&gt;</code>又可以回到主命令框<code>Ctrl+Shift+P/F1</code>模式。</p>
<a id="more"></a>
<p>在<code>Ctrl+P</code>窗口下还可以</p>
<ul>
<li>直接输入文件名，快速打开文件</li>
<li><code>?</code> 列出当前可执行的动作</li>
<li><code>!</code> 显示ERRORS或WARNINGS，也可以<code>Ctrl+Shift+M</code></li>
<li><code>:</code> 跳转到行数，也可以<code>Ctrl+G</code>直接进入</li>
<li><code>@</code> 跳转到SYMBOL（搜索变量或者函数），也可以<code>Ctrl+Shift+O</code>直接进入</li>
<li><code>#</code> 根据名字查找SYMBOL，也可以<code>Ctrl+T</code></li>
</ul>
<h2 id="编辑器-amp-窗口"><a href="#编辑器-amp-窗口" class="headerlink" title="编辑器 &amp; 窗口"></a>编辑器 &amp; 窗口</h2><h4 id="打开多个窗口（多项目）"><a href="#打开多个窗口（多项目）" class="headerlink" title="打开多个窗口（多项目）"></a>打开多个窗口（多项目）</h4><ul>
<li>打开新编辑器窗口：<code>Ctrl+Shift+N</code></li>
<li>打开终端 <code>Ctrl+~</code></li>
<li>创建新的终端 <code>Ctrl+Shift+~</code></li>
</ul>
<h4 id="打开多个文件（多文件）"><a href="#打开多个文件（多文件）" class="headerlink" title="打开多个文件（多文件）"></a>打开多个文件（多文件）</h4><ul>
<li>新建文件 <code>Ctrl+N</code></li>
<li>打开的文件之间切换 <code>Ctrl+Tab</code>，<code>Alt+Left</code>，<code>Alt+Right</code></li>
<li>切出一个新的编辑器（最多3个）<code>Ctrl+\</code>，也可以按住Ctrl鼠标点击EXPLORER里的文件名</li>
<li>左中右3个编辑器的快捷键 <code>Ctrl+1</code> <code>Ctrl+2</code> <code>Ctrl+3</code></li>
<li>编辑器换位置 <code>Ctrl+K Left/Right</code></li>
<li>切换标签页的位置 <code>Ctrl+Shift+PgUp/PgDown</code></li>
<li>多窗口标签页移动 <code>Ctrl+Alt+Left/Right</code></li>
</ul>
<h2 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h2><h4 id="格式调整"><a href="#格式调整" class="headerlink" title="格式调整"></a>格式调整</h4><ul>
<li>缩进 <code>Ctrl+[</code>，<code>Ctrl+]</code></li>
<li>折叠/展开代码块 <code>Ctrl+Shift+[</code>，<code>Ctrl+Shift+]</code></li>
<li>折叠/展开所有子区域代码 <code>Ctrl+k Ctrl+[</code>，<code>Ctrl+k Ctrl+]</code></li>
<li>代码格式化 <code>Shift+Alt+F</code>，或<code>Ctrl+Shift+P</code>后输入<code>format code</code></li>
<li>复制剪切一整行，不选中 <code>Ctrl+C/X</code>，<code>Ctrl+V</code></li>
<li>上下移动一行：<code>Alt+Up/Down</code></li>
<li>向上向下复制一行：<code>Shift+Alt+Up/Down</code></li>
<li>在当前行下/行上边插入一行 <code>Ctrl+ENTER</code>/<code>Ctrl+Shift+ENTER</code></li>
</ul>
<h2 id="光标相关"><a href="#光标相关" class="headerlink" title="光标相关"></a>光标相关</h2><ul>
<li>列选择 <code>Alt+Shifr+鼠标左键</code></li>
<li>移动到行首 <code>Home</code></li>
<li>移动到行尾 <code>End</code></li>
<li>移动到文件结尾 <code>Ctrl+End</code></li>
<li>移动到文件开头 <code>Ctrl+Home</code></li>
<li>移动到后半个括号 <code>Ctrl+Shift+|</code></li>
<li>选中当前行 <code>Ctrl+I</code>，多次按下选中向下内容</li>
<li>选择从光标到行尾 <code>Shift+End</code></li>
<li>选择从行首到光标处 <code>Shift+Home</code></li>
<li>删除光标所在行 <code>Ctrl+Delete</code></li>
<li><code>shrink/expand selection</code>（光标所在单词，文档高亮显示相同的）：<code>Shift+Alt+Left</code>和<code>Shift+Alt+Right</code></li>
<li><code>Multi-Cursor</code>：可以连续选择多处，然后一起修改，<code>Alt+Click</code>添加cursor</li>
<li>翻转IDE <code>Ctrl+Alt+Down</code> 或 <code>Ctrl+Alt+Up</code></li>
<li>光标跳到多行选中文本末尾 <code>Ctrl+Shift+L</code></li>
<li><code>Ctrl+D</code> 下一个匹配的也被选中(被我自定义成删除当前行了，见下边Ctrl+Shift+K)</li>
<li>回退上一个光标操作 <code>Ctrl+U</code></li>
<li>行视图上下移动 <code>Ctrl+Up/Down</code></li>
<li>屏视图上下移动 <code>Alt+Up/Down</code></li>
</ul>
<h2 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h2><ul>
<li>跳转到定义处 <code>F12</code></li>
<li>定义处缩略图：只看一眼而不跳转过去 <code>Alt+F12</code></li>
<li>列出所有的引用 <code>Shift+F12</code></li>
<li>同时修改本文件中所有匹配的 <code>Ctrl+F2</code></li>
<li>批量重命名：比如要修改一个方法名，可以选中后按F2，输入新的名字，回车，会发现所有的文件都修改过了。</li>
<li>跳转到下一个Error或Warning：当有多个错误时可以按F8逐个跳转</li>
<li>比较文件，在左侧边栏里选择文件右键 <code>选择以进行比较</code>，然后需要对比的文件上右键选择<code>与xxx比较</code>。</li>
</ul>
<h2 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h2><ul>
<li>查找 <code>Ctrl+F</code></li>
<li>查找替换 <code>Ctrl+H</code></li>
<li>查询下一个/上一个 <code>F3/Shift+F3</code> 或 <code>Enter/Shift Enter</code></li>
<li>选中所有出现在查询中的 <code>Alt + Enter</code></li>
<li>整个文件夹中查找 <code>Ctrl+Shift+F</code> 匹配符：</li>
<li><code>*</code> to match one or more characters in a path segment</li>
<li><code>?</code> to match on one character in a path segment</li>
<li><code>**</code> to match any number of path segments ,including none</li>
<li><code>{}</code> to groUp conditions (e.g. {<strong>/*.html,</strong>/*.txt} matches all html and txt files)</li>
<li><code>[]</code> to declare a range of characters to match (e.g., example.[0-9] to match on example.0,example.1, …</li>
</ul>
<h2 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h2><ul>
<li>全屏 <code>F11</code></li>
<li>缩放 <code>Ctrl + =</code> / <code>Ctrl + -</code></li>
<li>侧边栏显/隐 <code>Ctrl+B</code></li>
<li>侧边栏4大功能显示：<ul>
<li>打开资源 <code>Ctrl+Shift+E</code></li>
<li>打开搜索 <code>Ctrl+Shift+F</code></li>
<li>打开GIT <code>Ctrl+Shift+G</code></li>
<li>打开调试 <code>Ctrl+Shift+D</code></li>
<li>打开扩展 <code>Ctrl+Shift+X</code></li>
</ul>
</li>
<li>输出Show Output <code>Ctrl+Shift+U</code></li>
<li>预览markDown <code>Ctrl+Shift+V</code></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>自动保存：<code>File -&gt; AutoSave</code> ，或者<code>Ctrl+Shift+P</code>，输入 <code>auto</code></p>
]]></content>
    
    <summary type="html">
    
      VSCODE 常用快捷键
    
    </summary>
    
      <category term="tool" scheme="http://007sair.github.io/categories/tool/"/>
    
    
      <category term="vscode" scheme="http://007sair.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>苹方字体在H5的应用</title>
    <link href="http://007sair.github.io/2017/03/14/font-pingfang/"/>
    <id>http://007sair.github.io/2017/03/14/font-pingfang/</id>
    <published>2017-03-13T16:00:00.000Z</published>
    <updated>2017-08-23T02:10:49.713Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.apple.com/cn/macos/sierra/#international-fonts" target="_blank" rel="external">苹方字体</a>在手机端的展示效果如下：</p>
<h3 id="苹方字体"><a href="#苹方字体" class="headerlink" title="苹方字体"></a>苹方字体</h3><p><strong>苹方-简</strong></p>
<p style="font-family: 'PingFang SC', sans-serif">测试字体 123456789 abcdefg ABCDEFG</p>

<p><strong>苹方-简 常规体</strong></p>
<p style="font-family: PingFangSC-Regular, sans-serif;">测试字体 123456789 abcdefg ABCDEFG</p>

<a id="more"></a>
<p><strong>苹方-简 常规体</strong></p>
<p style="font-family: PingFangSC-Regular, sans-serif;">测试字体 123456789 abcdefg ABCDEFG</p>

<p><strong>苹方-简 常规体</strong></p>
<p style="font-family: PingFangSC-Regular, sans-serif;">测试字体 123456789 abcdefg ABCDEFG</p>

<p><strong>苹方-简 极细体</strong></p>
<p style="font-family: PingFangSC-Ultralight, sans-serif;">测试字体 123456789 abcdefg ABCDEFG</p>

<p><strong>苹方-简 细体</strong></p>
<p style="font-family: PingFangSC-Light, sans-serif;">测试字体 123456789 abcdefg ABCDEFG</p>

<p><strong>苹方-简 纤细体</strong></p>
<p style="font-family: PingFangSC-Thin, sans-serif;">测试字体 123456789 abcdefg ABCDEFG</p>

<p><strong>苹方-简 中黑体</strong></p>
<p style="font-family: PingFangSC-Medium, sans-serif;">测试字体 123456789 abcdefg ABCDEFG</p>

<p><strong>苹方-简 中粗体</strong></p>
<p style="font-family: PingFangSC-Semibold, sans-serif;">测试字体 123456789 abcdefg ABCDEFG</p>

<h3 id="San-Francisco"><a href="#San-Francisco" class="headerlink" title="San Francisco"></a>San Francisco</h3><p style="'San Francisco', san-serif;">测试字体 123456789 abcdefg ABCDEFG</p>

<h3 id="apple-system"><a href="#apple-system" class="headerlink" title="-apple-system"></a>-apple-system</h3><p style="font-family: -apple-system, BlinkMacSystemFont, sans-serif;"><br>    测试字体 123456789 abcdefg ABCDEFG<br></p>

<p>参考自：<a href="http://stackoverflow.com/questions/32660748/how-to-use-apples-new-san-francisco-font-on-a-webpage" target="_blank" rel="external">http://stackoverflow.com/questions/32660748/how-to-use-apples-new-san-francisco-font-on-a-webpage</a></p>
]]></content>
    
    <summary type="html">
    
      苹方字体在H5的应用
    
    </summary>
    
      <category term="test" scheme="http://007sair.github.io/categories/test/"/>
    
    
      <category term="css" scheme="http://007sair.github.io/tags/css/"/>
    
      <category term="test" scheme="http://007sair.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>怎么把孩子养到18岁，神志正常还不恨你</title>
    <link href="http://007sair.github.io/2017/03/03/How-to-get-your-kids-to-18-sane-and-not-hating-you/"/>
    <id>http://007sair.github.io/2017/03/03/How-to-get-your-kids-to-18-sane-and-not-hating-you/</id>
    <published>2017-03-02T16:00:00.000Z</published>
    <updated>2017-08-23T01:49:20.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>译文，来自：<a href="https://www.theguardian.com/lifeandstyle/2016/feb/06/how-to-get-your-kids-to-18-sane-and-not-hating-you?CMP=share_btn_link" target="_blank" rel="external">How to get your kids to 18, sane and not hating you</a></p>
</blockquote>
<p>七位作者为大家讲述父母之道，都是他们希望在开始时就懂得的事</p>
<h3 id="最艰难的客户"><a href="#最艰难的客户" class="headerlink" title="最艰难的客户"></a>最艰难的客户</h3><p>我第一次怀孕的时候，还是一个装逼的公司律师，习惯于自作主张。我真正需要的就是那时有人告诉我：“了解你最坏的客户吧？就那个半夜两点给你打电话，只为告诉你你多差劲的那家伙；或者那个突然就需要什么莫名的表格的混蛋，你只好翻天翻地给他找，找到了他又发火说那不是他想要的东西，虽然这确实是他要的。恭喜啊，现在你就同一个小小版的客户生活在一起了。悲哀的是，你学过的一切对这个新客户都还没有一点用处。”</p>
<a id="more"></a>
<p>“你就是写上一封措辞冷酷的信给他们，你的小宝宝也不会自动去吃晚上10点的奶，小家伙也不会想去穿袜子。你需要学习新技巧，还得够强悍——耐心、娱乐、最傻逼的喜剧——就是这样也还是要做好失败的准备，经常的失败。扔掉你现有的成功秘诀。孩子开始睡整觉不是你的成功，他们直到10岁还是只吃小块奶酪也不算是失败。你唯一的目标是把他们养到18岁，活着，清醒，还不恨你。没有奖励计划，但是工作的满意度倒还不差。祝好运。” Emma Beddington</p>
<h3 id="我希望我能更有母爱"><a href="#我希望我能更有母爱" class="headerlink" title="我希望我能更有母爱"></a>我希望我能更有母爱</h3><p>我希望有人能告诉我，在像个烈士一样溺爱孩子与只是给他们关注之间有巨大的差别。现在我想，在培养独立又灵活的孩子这个期望上，我太死脑筋了，对他们的独特需求同情不够。让我吞下这个苦果有点困难，这一点我们（两个20多的成年孩子，还有一个仍然在家的15岁孩子）都得同意这一点。然后我们也会抱一抱。</p>
<p>我仍然完全反对那种育儿风格，就是给孩子清理掉所有障碍，让他们永远不需要自己面对难题。牛津大学心理咨询的头，心理学家Alan Percy说过，如果父母做了所有的事，就会让孩子什么都不会——他还说，这也会让孩子对父母感到憎恨与愤怒。<br>但是，对我和孩子们来说，在关爱、养育方面略多一点可能会更好。你可以陪孩子玩，聊天，同时培养他们的未来能力的时间很快就结束了。 Louise Chunn，Welldoing.org的创始人。</p>
<h3 id="打闹可以让小孩子放松"><a href="#打闹可以让小孩子放松" class="headerlink" title="打闹可以让小孩子放松"></a>打闹可以让小孩子放松</h3><p>最好最简单的建议就是同周围的人交往并且咨询他们的意见。别的还需要做什么？</p>
<ol>
<li>我很幸运同正确的人一起生孩子。很多人不是这样。他必须是有同样基本价值观的人，还要能忍受你最疯狂的梦想，还要有无限的耐心、友善、幽默以及热情。他必须要同样的重视你，否则，还是养条狗吧。</li>
<li>第一年还是很容易的——只要你认识到一个现实：你的时间再也不是你的了。</li>
<li>对小孩子，你不能太善良或者太有耐心。在遇到难题时，你第一个反应应该是打闹。小孩子是地球上最搞笑的东西了：就像袋熊那样野，同时又有人的特点和习性。</li>
<li>你现在需要每天早起，所有节假日也不例外，这个要持续14年。然后，你的生物钟就会改变，你会在早上8点冲进年轻人的房间，大叫半天都过完了。</li>
<li>碰到周末睡睡觉实在没有任何不对的。 Mike Power</li>
</ol>
<h3 id="我还没有准备好他们就到青春期了"><a href="#我还没有准备好他们就到青春期了" class="headerlink" title="我还没有准备好他们就到青春期了"></a>我还没有准备好他们就到青春期了</h3><p>我很享受早几年当父母的感觉。隐藏在我身体里的和我们父亲一样的物质开始浮现出来。用我女儿的话说，我是个快乐爸爸。</p>
<p>我没准备的事就是青春期。那种情绪波动，无法理解的愤怒，还有我女儿整天都躲在自己屋子里只在吃饭时出来还要跟她弟弟打架，这些都很难对付。我没处理好青春期这些事，让我跟两个孩子的关系都变糟了，然后这个关系再也没有恢复过来。</p>
<p>我现在知道我没有经过典型的青春期。我喜欢我的父母，我慢慢的远离他们。从来没有大喊大叫，也没有争吵。我们呆在一起都很舒服，然后我就去上大学，工作，结婚，再回去就是个成年人了。对我自己的两个孩子个性突变这个事，我一点准备都没有。</p>
<p>我希望能有人在头10年就给我解释清楚：“现在你同你的天使们时光正好，但是他们会变，变得无可理喻的可怕，你必须做好准备，还得一起摇摆。” Adrian Mourby</p>
<h3 id="别像我这样"><a href="#别像我这样" class="headerlink" title="别像我这样"></a>别像我这样</h3><p>我的两个男孩现在都长大了，有他们自己的生活。我很年轻就生了他们，一个接一个，只能快点啦。所以我的第一个建议是不要在不够成熟，不能负担这个责任时生孩子——说起来容易。</p>
<p>教育孩子说请，谢谢，对不起，从他们说话起就教——这能让他们在周围更有礼貌，也让他们的人生更顺利。</p>
<p>教育孩子友善，为他人着想，但是你必须自己做好榜样。想让别人怎么对你，就怎么对别人，是个老话，但很有用。</p>
<p>早点分配家务，搞的有趣点，让它成为第二天性。否则就是自己的负担。有个朋友，她女儿22了，还住在家里，甚至都不收盘子，用过的杯子也到处乱放。你说谁来收拾，还像个老妇人一样唠叨？</p>
<p>对吃的放松点。如果老担心他们不吃蔬菜或者其他东西，孩子就会越来越拒绝，就是说不。特别是如果他们看你难受很有意思的话。孩子饿了自然会吃——他们不是殉道者——到时候不管是花椰菜还是牛脸肉他们都会吃。一旦他们开始吃硬的，就不要再给他们搞什么单独的吃，那只会让他们挑剔。如果他们跟你吃一样的——最好还是在一个桌子上——他们会喜欢各种吃的，也会对新味道新东西感兴趣。</p>
<p>如果在陪孩子就不要多看手机，那会让他们觉得屏幕比人还重要，他们会烦躁，会大叫——到时候又怎么批评他们呢？ Rachel Douglas</p>
<h3 id="遵循你的直觉"><a href="#遵循你的直觉" class="headerlink" title="遵循你的直觉"></a>遵循你的直觉</h3><p>扔了育儿书，这是某个出版过一本书的人说的。我关于早期当妈的最悲惨的记忆，无过于把Gina Ford的书Contented Little Baby用在我的小孩身上，他可是超级不服从。固定时间，在黑屋子里喂奶，不进行目光接触？结果呢？孩子哭闹，妈妈悲惨。我一度想遵从专家的意见，建立起主导地位和规矩，认为这是对的。这不对。在那些天里能让我自信的就只有遵从我自己的直觉。</p>
<p>几周后，我就把那本书扔了，我睡到沙发上，他想吃就喂。孩子想吃的时候就会想让你喂（差不多是随时），这完全自然啊。但时不时的，如果人不能遵守精确的规程，我还是觉得很失败。还有个睡觉“专家” Richard Ferber，他有另外一个战场，很快我也把他的书扔了。</p>
<p>Annabel Karmel的做饭书我是不看了。它不是严格的育儿书，但还是搞出一套儿童应该吃什么的处方，只会让你在孩子不吃自己做的燕麦卷非要吃垃圾食品时感到罪恶感。我的三个孩子都这样。</p>
<p>育儿，儿童教育，这些我全买了，现在它们都在书架顶上吃灰。它们本来就该在那里，包括我自己的书，我还在其中有一章里写了为了孩子少看手机的几个方法。</p>
<p>我遵守了吗？我努力了，但是对最小的孩子，我还是太依赖iNanny了。现在她四岁了，几乎不看任何屏幕，反倒是ipad在吃灰了。所以说，不要看任何育儿建议——特别是你自己的。 Emma Cook</p>
<h3 id="总是自己第一"><a href="#总是自己第一" class="headerlink" title="总是自己第一"></a>总是自己第一</h3><p>我的父母冷静、严格、坚忍。我的育儿经验就完全排斥这些——60年代，多愁善感，自由派。经常的玩闹和搞笑。这一套直到他们10岁还不错，然后就不行了。</p>
<p>那些50后的边界是根本的。我可能从来没那样做。你得庄重，像贵族那样。声名狼籍的现代性也不能消除它。吸上烟袋，穿上空心绒。全是绝对性。不要再说了。我的女儿们完全按它的反面来做。小心那些虚张声势和假装的漠不关心。</p>
<p>镇静剂对你没好处。</p>
<p>永远积极。活泼。这让我受够了。学着享受胡言乱语吧，特别是他们15岁到35岁的时候。</p>
<p>不要当老师——大多数老师的孩子都傻头傻脑的。我本应知道的。</p>
<p>不要过分刺激他们的小心灵。不要从刚出生就在睡觉时放莫扎特，或者在摇蓝上挂行星。我们做了。这让他们看上去过分聪明，还有点失职。</p>
<p>综上，不要对街头混混，考试工厂，K粉，蜘蛛纹身还有什么就要来临的末日忧虑。这很有意思。</p>
<p>总是把自己放在第一位。然后试着用温和的忽视，绝对的爱还有更多的戏谑来达成幸福。轻如和风。Ian Whitwham</p>
]]></content>
    
    <summary type="html">
    
      怎么把孩子养到18岁，神志正常还不恨你
    
    </summary>
    
      <category term="life" scheme="http://007sair.github.io/categories/life/"/>
    
    
      <category term="life" scheme="http://007sair.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Date（日期）对象在移动端的坑</title>
    <link href="http://007sair.github.io/2017/03/01/date-keng/"/>
    <id>http://007sair.github.io/2017/03/01/date-keng/</id>
    <published>2017-02-28T16:00:00.000Z</published>
    <updated>2017-08-23T02:10:39.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文主要描述我在工作中遇到的关于<code>new Date()</code>的一些坑，因为涉及移动端的测试，各端<code>userAgent</code>如下：</p>
<p><strong>PC</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Chrome</span></div><div class="line">Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) </div><div class="line">Chrome/<span class="number">49.0</span><span class="number">.2623</span><span class="number">.87</span> Safari/<span class="number">537.36</span></div><div class="line"></div><div class="line"><span class="comment">// Safari</span></div><div class="line">Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.2</span>; WOW64) AppleWebKit/<span class="number">534.57</span><span class="number">.2</span> (KHTML, like Gecko) </div><div class="line">Version/<span class="number">5.1</span><span class="number">.7</span> Safari/<span class="number">534.57</span><span class="number">.2</span></div></pre></td></tr></table></figure>
<p><strong>Mobile</strong></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 微信</span></div><div class="line">Mozilla/<span class="number">5.0</span> (iPhone; CPU iPhone OS <span class="number">10</span>_2_1 like Mac OS X) AppleWebKit/<span class="number">602.4</span><span class="number">.6</span> (KHTML, like Gecko) </div><div class="line">Mobile/<span class="number">14</span>D27 MicroMessenger/<span class="number">6.5</span><span class="number">.5</span> NetType/WIFI Language/zh_CN</div><div class="line"></div><div class="line"><span class="comment">// Safari</span></div><div class="line">Mozilla/<span class="number">5.0</span> (iPhone; CPU iPhone OS <span class="number">10</span>_2_1 like Mac OS X) AppleWebKit/<span class="number">602.4</span><span class="number">.6</span> (KHTML, like Gecko) </div><div class="line">Version/<span class="number">10.0</span> Mobile/<span class="number">14</span>D27 Safari/<span class="number">602.1</span></div></pre></td></tr></table></figure>
<h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><p><strong>先来看一段代码：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &lt;= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020/03/01 24:00:00'</span>).getTime() ) &#123;</div><div class="line">    alert(<span class="string">'true'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">'false'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果毫无疑问：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">true</div></pre></td></tr></table></figure>
<p><strong>坑来了<del>~</del></strong></p>
<p>在我的手机里，输出结果却是<code>false</code></p>
<p>别着急，我们一步步来找原因。</p>
<p>先来看看<code>new Date(&#39;2020/03/01 24:00:00&#39;)</code>在PC和手机的输出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PC</span></div><div class="line">Mon Mar <span class="number">02</span> <span class="number">2020</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> GMT+<span class="number">0800</span> (ä¸­å½æ åæ¶é´)</div><div class="line"></div><div class="line"><span class="comment">// Mobile</span></div><div class="line">Invalid <span class="built_in">Date</span></div></pre></td></tr></table></figure>
<p>很明显，<code>24:00:00</code>这种写法在手机端被视为<strong>无效时间</strong>！</p>
<p><strong>PS：</strong>还有一种写法在手机端也被视为无效时间：<code>new Date(&#39;2020-03-01 12:00:00&#39;)</code></p>
<p>那无效时间转成时间戳会是什么呢？答案：<code>NaN</code></p>
<p>然后我们来测试任何数跟NaN作比较：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">10000</span> &gt; <span class="literal">NaN</span>     <span class="comment">// false</span></div><div class="line"><span class="number">10000</span> &lt; <span class="literal">NaN</span>     <span class="comment">// false</span></div><div class="line"><span class="number">-5</span> &lt; <span class="literal">NaN</span>        <span class="comment">//false</span></div><div class="line"><span class="string">'1000000'</span> &lt; <span class="literal">NaN</span>     <span class="comment">// false</span></div><div class="line"><span class="literal">null</span> &lt; <span class="literal">NaN</span>          <span class="comment">// false</span></div><div class="line"><span class="literal">undefined</span> &lt; <span class="literal">NaN</span>     <span class="comment">// false</span></div><div class="line">[] &lt; <span class="literal">NaN</span>        <span class="comment">// false</span></div><div class="line"><span class="built_in">Object</span> &lt; <span class="literal">NaN</span>    <span class="comment">// false</span></div><div class="line"><span class="literal">NaN</span> &lt; <span class="literal">NaN</span>       <span class="comment">// false</span></div><div class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>      <span class="comment">// false</span></div><div class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>     <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><code>new Date的24:00:00</code>在移动端&amp;<code>PC(safari)</code>浏览器中会被视为无效时间</li>
<li><code>2017-03-01 12:00:00</code>的横线写法在移动端&amp;<code>PC(safari)</code>浏览器中会被视为无效时间</li>
<li>无效时间经过时间戳转换后会变为NaN</li>
</ul>
]]></content>
    
    <summary type="html">
    
      new Date()在pc和移动端的一些显示差异
    
    </summary>
    
      <category term="javascript" scheme="http://007sair.github.io/categories/javascript/"/>
    
    
      <category term="bug" scheme="http://007sair.github.io/tags/bug/"/>
    
      <category term="javascript" scheme="http://007sair.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>css选择器总结</title>
    <link href="http://007sair.github.io/2017/02/06/css-selector/"/>
    <id>http://007sair.github.io/2017/02/06/css-selector/</id>
    <published>2017-02-05T16:00:00.000Z</published>
    <updated>2017-08-23T02:11:00.069Z</updated>
    
    <content type="html"><![CDATA[<style>
td{font-family: Verdana, Geneva, sans-serif;font-size: 13px;}
</style>

<blockquote>
<p>约定：IE7+ 意思为大于（含IE7）的浏览器</p>
</blockquote>
<h2 id="CSS1-amp-CSS2-1-选择器"><a href="#CSS1-amp-CSS2-1-选择器" class="headerlink" title="CSS1 &amp; CSS2.1 选择器"></a>CSS1 &amp; CSS2.1 选择器</h2><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><p>|——————+———————–+———————————————+————|<br>|    选择器        |       例子             |         例子描述                             |   兼容性   |<br>|——————|———————–+———————————————|————|<br>| <em>                |             </em>         |       选择所有元素。                          |    all     |<br>| E                |             p         |      选择所有 </p><p> 元素。                      |    all     |<br>| #id              |        #firstname     |  选择 id=”firstname” 的所有元素。             |    all     |<br>| .class           |        .intro         |  选择 class=”intro” 的所有元素。              |    all     |<br>|——————+———————–+———————————————|————|</p>
<a id="more"></a>
<h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><p>|——————+———————–+———————————————+————|<br>|    选择器        |       例子             |         例子描述                             |   兼容性   |<br>|——————|———————–+———————————————|————|<br>| E,F              |        div,p          |   选择所有 <div> 元素和所有 <p> 元素。         |    all     |<br>| E F              |        div p          |   选择 <div> 元素内部的所有 <p> 元素。         |   all      |<br>| E &gt; F            |        div&gt;p          |   选择父元素为 <div> 元素的所有 <p> 元素。     |    IE7+    |<br>| E + F            |        div+p          |   选择紧接在 <div> 元素之后的所有 <p> 元素。   |    IE7+    |<br>|——————+———————–+———————————————|————|</p>
<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>|——————+———————–+———————————————+————|<br>|    选择器        |       例子             |         例子描述                             |   兼容性   |<br>|——————|———————–+———————————————|————|<br>| E[att]           |      [target]         |   选择带有 target 属性所有元素。               |    IE7+     |<br>| E[att=val]       |   [target=_blank]     |   选择 target=”_blank” 的所有元素。            |   IE7+      |<br>| E[att~=val]      |   [title~=flower]     |   选择 title 属性包含单词 “flower” 的所有元素。 |    IE7+    |<br>| E[att|=val]     |    [lang|=en]         |   选择 lang 属性值以 “en” 开头的所有元素。     |    IE7+    |<br>|——————+———————–+———————————————|————|</p>
<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>|——————+———————–+———————————————+————|<br>|    选择器        |       例子             |         例子描述                             |   兼容性   |<br>|——————|———————–+———————————————|————|<br>| E:first-line     |    p:first-line        |   选择每个 </p><p> 元素的首行。                   |    IE7+    |<br>| E:first-letter   |    p:first-letter      |    选择每个 </p><p> 元素的首字母。                |    IE7+    |<br>| E:before         |    p:before            |   在每个 </p><p> 元素的内容之前插入内容。          |    IE8+    |<br>| E:after          |    p:after             |   在每个 </p><p> 元素的内容之后插入内容。          |    IE8+    |<br>|——————+———————–+——————————————– -|————|</p>
<h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>|——————+———————–+———————————————+————|<br>|    选择器        |       例子             |         例子描述                             |   兼容性   |<br>|——————|———————–+———————————————|————|<br>| E:first-child    |    p:first-child      |  选择属于父元素的第一个子元素的每个 </p><p> 元素。  |    IE7+    |<br>| E:link           |    a:link             |    选择所有未被访问的链接。                    |    all    |<br>| E:visited        |    a:visited          |   选择所有已被访问的链接。                     |    all    |<br>| E:active         |   a:active            |   选择活动链接。                              |    all    |<br>| E:hover          |   a:hover             |   选择鼠标指针位于其上的链接。                  |   IE6+(?)    |<br>| E:focus          |   input:focu          |   选择获得焦点的 input 元素。                 |    IE8+    |<br>| E:lang(c)        |   p:lang(it)          |  选择带有以 “it” 开头的 lang 属性值的每个 </p><p> 元素。 |    IE7+    |<br>|——————+———————–+——————————————– -|————|</p>
<p><strong>CSS 2.1 selectors Known issues (6):</strong></p>
<ul>
<li>IE6 does not properly support combinations of pseudo classes like <code>:link</code>, <code>:active</code> and <code>:visited</code></li>
<li>IE8-11 does not update an element’s :hover status when scrolling without moving the pointer.</li>
<li>Safari 5.1 and Android browsers do not support the adjacent selector if the adjacent element is a “nav” element.</li>
<li>:first-child fails in IE7 if the first child is a comment.</li>
<li>IE7 doesn’t support all pseudo classes (like :focus) or pseudo elements (like :before and :after)</li>
<li>In IE10 adjacent sibling selector doesn’t work with pseudo-class in case of <code>E:active F</code>.</li>
</ul>
<h2 id="CSS3选择器"><a href="#CSS3选择器" class="headerlink" title="CSS3选择器"></a>CSS3选择器</h2><h3 id="同级元素通用选择器"><a href="#同级元素通用选择器" class="headerlink" title="同级元素通用选择器"></a>同级元素通用选择器</h3><p>|——————+———————–+———————————————+————|<br>|    选择器        |       例子             |         例子描述                             |   兼容性   |<br>|——————|———————–+———————————————|————|<br>| E ~ F            |    p~ul           |   选择前面有 \<p\> 元素的每个 \<ul\> 元素。        |    IE7+    |<br>|——————+———————–+———————————————|————|</ul\></p\></p>
<h3 id="属性选择器-1"><a href="#属性选择器-1" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>|——————+———————–+—————————————————+————|<br>|    选择器        |       例子             |         例子描述                                   |   兼容性   |<br>|——————|———————–+—————————————————-|————|<br>| E[att^=”val”]    |  a[src^=”https”]      |  选择其 src 属性值以 “https” 开头的每个 \<a\> 元素。  |    IE7+    |<br>| E[att$=”val”]    |  a[src$=”.pdf”]       |  选择其 src 属性以 “.pdf” 结尾的所有 \<a\> 元素。     |    IE7+    |<br>| E[att<em>=”val”]    |  a[src</em>=”abc”]        |  选择其 src 属性中包含 “abc” 子串的每个 \<a\> 元素。  |    IE7+    |<br>|——————+———————–+—————————————————-|————|</a\></a\></a\></p>
<h3 id="与用户界面有关的伪类"><a href="#与用户界面有关的伪类" class="headerlink" title="与用户界面有关的伪类"></a>与用户界面有关的伪类</h3><p>|——————+———————–+———————————————+————|<br>|    选择器        |       例子             |         例子描述                             |   兼容性   |<br>|——————|———————–+———————————————|————|<br>| E:enabled        |    input:enabled      |   选择每个启用的 \<input\> 元素。              |    IE9+    |<br>| E:disabled       |    input:disabled     |   选择每个禁用的 \<input\> 元素               |    IE9+   |<br>| E:checked        |    input:checked      |    选择每个被选中的 \<input\> 元素。           |    IE9+    |<br>| E::selection     |    ::selection        |   选择被用户选取的元素部分。                    |    IE9+   |<br>|——————+———————–+——————————————– -|————|</input\></input\></input\></p>
<h3 id="结构性伪类"><a href="#结构性伪类" class="headerlink" title="结构性伪类"></a>结构性伪类</h3><p>|———————-+———————–+———————————————+————|<br>|    选择器            |       例子             |         例子描述                             |   兼容性   |<br>|———————-|———————–+———————————————|————|<br>| E:root               |    :root              | 选择文档的根元素。                             |    IE9+    |<br>| E:nth-child(n)       |  p:nth-child(2)       | 选择属于其父元素的第二个子元素的每个 </p><p> 元素。  |    IE9+    |<br>| E:nth-last-child(n)  |  p:nth-last-child(2)  | 同上，从最后一个子元素开始计数。                |    IE9+    |<br>| E:nth-of-type(n)     |  p:nth-of-type(2)     | 选择属于其父元素第二个 </p><p> 元素的每个 </p><p> 元素。 |    IE9+    |<br>| E:nth-last-of-type(n)| p:nth-last-of-type(2) | 同上，但是从最后一个子元素开始计数。             |    IE9+    |<br>| E:last-child         |   p:last-child        | 选择属于其父元素最后一个子元素每个 </p><p> 元素。    |    IE9+    |<br>| E:first-of-type      |   p:first-of-type     | 选择属于其父元素的首个 </p><p> 元素的每个 </p><p> 元素。 |    IE9+    |<br>| E:last-of-type       |   p:last-of-type      | 选择属于其父元素的最后 </p><p> 元素的每个 </p><p> 元素。 |    IE9+    |<br>| E:only-child         |   p:only-child        | 选择属于其父元素的唯一子元素的每个 </p><p> 元素。    |    IE9+    |<br>| E:only-of-type       |   p:only-of-type      | 选择属于其父元素唯一的 </p><p> 元素的每个 </p><p> 元素。 |    IE9+    |<br>| E:empty              |   p:empty             | 选择没有子元素的每个 </p><p> 元素（包括文本节点）。  |    IE9+    |<br>|———————-+———————–+———————————————-|————|</p>
<h3 id="其他伪类"><a href="#其他伪类" class="headerlink" title="其他伪类"></a>其他伪类</h3><p>|——————+———————–+———————————————+————|<br>|    选择器         |       例子            |         例子描述                             |   兼容性   |<br>|——————|———————–+———————————————|————|<br>| E:not(s)         |    :not(p)            |   选择非 </p><p> 元素的每个元素。                  |    IE9+    |<br>| E:target         |   #news:target        |   选择当前活动的 #news 元素。                  |    IE9+    |<br>|——————+———————–+———————————————-|————|</p>
<p><strong>CSS 3 selectors Known issues (4):</strong></p>
<ul>
<li>iOS 9 has a bug in WebViews (not Safari) with the CSS sibling selector</li>
<li>IE9-IE11 supports <code>:empty</code> but will not repaint/relayout the page if content is added/removed from an <code>:empty</code> selected element</li>
<li>iOS 8 Safari has issues with nth-child. </li>
<li>Android 4.3 and lower (together with older WebKit browsers) have issues when combining pseudo classes with adjacent or general sibling selectors.</li>
</ul>
<h2 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h2><ul>
<li>css1少数选择器不支持ie6，其他全支持</li>
<li>css2.1不支持ie6</li>
<li>css3不支持ie6，少数在ie7 8上也不支持</li>
</ul>
<p><strong>参考：</strong></p>
<ul>
<li><a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="external">CSS 选择器参考手册</a></li>
<li><a href="http://caniuse.com/#search=css%20sel" target="_blank" rel="external">Can i use</a></li>
<li><a href="https://labs.qianduan.net/css-selector/" target="_blank" rel="external">CSS选择器的浏览器支持</a></li>
</ul>
</div></p></div></p></div></p></div></p>]]></content>
    
    <summary type="html">
    
      css选择器的使用与兼容情况
    
    </summary>
    
      <category term="css" scheme="http://007sair.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://007sair.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>word-wrap与word-break的区别</title>
    <link href="http://007sair.github.io/2016/07/25/wordbreak/"/>
    <id>http://007sair.github.io/2016/07/25/wordbreak/</id>
    <published>2016-07-24T16:00:00.000Z</published>
    <updated>2017-08-23T02:11:11.325Z</updated>
    
    <content type="html"><![CDATA[<style>
div{
    word-break: normal;
    word-wrap: normal;
}
.test{
    margin-bottom: 2px;
    width: 230px;
    border: 1px solid red;
}
.c1{}
.c2{ word-wrap:break-word;}
.c3{ word-wrap:break-word;word-break:break-all;}
.c4{ word-wrap:break-word;word-break:keep-all;}
.c5{ word-break:break-all;}
.c6{ word-break:keep-all;}
</style>

<p>换行问题自古以来就是一个难题，写了几个例子，先来看看，没有耐心的可以直接<a href="#result">点这里</a></p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h4 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a>word-wrap</h4><p>word-wrap 属性允许长单词或 URL 地址换行到下一行。</p>
<p><strong>语法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">word-wrap: normal | break-word;</div></pre></td></tr></table></figure>
<p>|——————+——————–+<br>|    值            |  描述               |<br>|——————|———————|<br>| normal           | 只在允许的断字点换行（浏览器保持默认处理）。 |<br>| break-word       | 在长单词或 URL 地址内部进行换行。|<br>|——————+——————————-|</p>
<a id="more"></a>
<h4 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a>word-break</h4><p>word-break 属性规定自动换行的处理方法。</p>
<p><strong>语法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">word-break: normal | break-all | keep-all;</div></pre></td></tr></table></figure>
<p>|—————–+—————————|<br>|       值        | 描述                       |<br>|—————–|:—————————|<br>| normal          | 使用浏览器默认的换行规则。    |<br>| break-all       | 允许在单词内换行。           |<br>| keep-all        | 只能在半角空格或连字符处换行。     |<br>|—————–+——————————|</p>
<h3 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h3><p>为了方便测试，先将<code>div</code>的<code>word-break</code>与<code>word-wrap</code>改成<code>normal</code>，<br>以下测试均为数字、字母、单词、汉字、汉字+单词混排在<code>div</code>中的表现情况</p>
<h4 id="默认无任何换行样式"><a href="#默认无任何换行样式" class="headerlink" title="默认无任何换行样式"></a>默认无任何换行样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.c1</span> &#123; </div><div class="line">    <span class="comment">/* 无任何样式 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="test c1">11111111111111111111111111111111111111111111111111111</div><br><div class="test c1">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</div><br><div class="test c1">This is all English. This is all English. This is all English. </div><br><div class="test c1">全是中文的情况。全是中文的情况。全是中文的情况。 </div><br><div class="test c1">中英文混排的情况。Chinese and English. 中英文混排的情况。Chinese and English. </div>

<h4 id="word-wrap-break-word"><a href="#word-wrap-break-word" class="headerlink" title="word-wrap: break-word"></a>word-wrap: break-word</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.c2</span> &#123;</div><div class="line">    <span class="attribute">word-wrap</span>: break-word;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="test c2">111111111111111111111111111111111111111111111111111111111 </div><br><div class="test c2">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa </div><br><div class="test c2">This is all English. This is all English. This is all English. </div><br><div class="test c2">全是中文的情况。全是中文的情况。全是中文的情况。</div><br><div class="test c2">中英文混排的情况。Chinese and English. 中英文混排的情况。Chinese and English. </div>

<h4 id="word-break-break-all"><a href="#word-break-break-all" class="headerlink" title="word-break: break-all;"></a>word-break: break-all;</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.c5</span> &#123; </div><div class="line">    <span class="attribute">word-break</span>: break-all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="test c5">111111111111111111111111111111111111111111111111111111111 </div><br><div class="test c5">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa </div><br><div class="test c5">This is all English. This is all English. This is all English. </div><br><div class="test c5">全是中文的情况。全是中文的情况。全是中文的情况。</div><br><div class="test c5">中英文混排的情况。Chinese and English. 中英文混排的情况。Chinese and English. </div>

<h4 id="word-wrap-break-word-word-break-break-all"><a href="#word-wrap-break-word-word-break-break-all" class="headerlink" title="word-wrap: break-word; word-break: break-all;"></a>word-wrap: break-word; word-break: break-all;</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.c3</span> &#123; </div><div class="line">    <span class="attribute">word-wrap</span>: break-word;</div><div class="line">    <span class="attribute">word-break</span>: break-all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="test c3">111111111111111111111111111111111111111111111111111111111 </div><br><div class="test c3">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa </div><br><div class="test c3">This is all English. This is all English. This is all English. </div><br><div class="test c3">全是中文的情况。全是中文的情况。全是中文的情况。</div><br><div class="test c3">中英文混排的情况。Chinese and English. 中英文混排的情况。Chinese and English. </div>

<h4 id="word-wrap-break-word-word-break-keep-all"><a href="#word-wrap-break-word-word-break-keep-all" class="headerlink" title="word-wrap: break-word; word-break: keep-all;"></a>word-wrap: break-word; word-break: keep-all;</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.c4</span> &#123; </div><div class="line">    <span class="attribute">word-wrap</span>: break-word;</div><div class="line">    <span class="attribute">word-break</span>: keep-all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="test c4">111111111111111111111111111111111111111111111111111111111 </div><br><div class="test c4">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa </div><br><div class="test c4">This is all English. This is all English. This is all English. </div><br><div class="test c4">全是中文的情况。全是中文的情况。全是中文的情况。</div><br><div class="test c4">中英文混排的情况。Chinese and English. 中英文混排的情况。Chinese and English. </div>

<h4 id="word-break-keep-all"><a href="#word-break-keep-all" class="headerlink" title="word-break: keep-all;"></a>word-break: keep-all;</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.c6</span> &#123; </div><div class="line">    <span class="attribute">word-break</span>: keep-all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="test c6">111111111111111111111111111111111111111111111111111111111 </div><br><div class="test c6">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa </div><br><div class="test c6">This is all English. This is all English. This is all English. </div><br><div class="test c6">全是中文的情况。全是中文的情况。全是中文的情况。</div><br><div class="test c6">中英文混排的情况。Chinese and English. 中英文混排的情况。Chinese and English. </div>


<h3><span id="result">结论</span></h3>

<ul>
<li>word-wrap 强调的是是否允许单词内断句。<ul>
<li>normal: 单词太长，换行显示，再超过一行就溢出显示。 </li>
<li>break-word: 当单词太长时，先尝试换行，换行后还是太长，单词内还可以换行。</li>
</ul>
</li>
<li>word-break 强调的则是怎么样来进行单词内的断句。 <ul>
<li>break-all: 强行上，挤不下的话剩下的就换下一行显示呗。霸道型。 </li>
<li>keep-all: 放不下我了，那我就另起一行展示，再放不下，我也不退缩。傲骄型。</li>
</ul>
</li>
</ul>
<p>事实上，<code>word-wrap:break-word</code>与<code>word-break:break-all</code>共同点是都能把长单词强行断句，不同点是<code>word-wrap:break-word</code>会首先起一个新行来放置长单词，新的行还是放不下这个长单词则会对长单词进行强制断句；而<code>word-break:break-all</code>则不会把长单词放在一个新行里，当这一行放不下的时候就直接强制断句了。</p>
]]></content>
    
    <summary type="html">
    
      word-wrap与word-break的区别
    
    </summary>
    
      <category term="html" scheme="http://007sair.github.io/categories/html/"/>
    
    
      <category term="html" scheme="http://007sair.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>HTML字符转义、特殊字符笔记</title>
    <link href="http://007sair.github.io/2016/07/04/UNICODE/"/>
    <id>http://007sair.github.io/2016/07/04/UNICODE/</id>
    <published>2016-07-03T16:00:00.000Z</published>
    <updated>2017-08-25T06:44:48.839Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转义字符串的由来"><a href="#转义字符串的由来" class="headerlink" title="转义字符串的由来"></a>转义字符串的由来</h3><p>HTML中<code>&lt;</code>，<code>&gt;</code>，<code>&amp;</code>等有特殊含义（<code>&lt;</code>，<code>&gt;</code>，用于链接签，<code>&amp;</code>用于转义），不能直接使用。这些符号是不显示在我们最终看到的网页里的，倘若我们需要在页面中显示这些字符，就需要用到<strong>转义字符串</strong>了。</p>
<h3 id="转义字符串的组成"><a href="#转义字符串的组成" class="headerlink" title="转义字符串的组成"></a>转义字符串的组成</h3><p>一个完整的转义字符串，分为三个部分：</p>
<ol>
<li>一个<code>&amp;</code>符号，英文为ampersand；</li>
<li>是实体名字或为<code>#</code>+实体编号；</li>
<li>一个<code>;</code>号；</li>
</ol>
<p>例如，常用的大于号<code>&gt;</code>，使用转义字符串后的写法为<code>&amp;gt;</code>或<code>&amp;#62;</code></p>
<p>我们注意到，上面的大于号使用了2种方式的转义，第一种称为<code>实体名称</code>，第二种为<code>实体编号</code>，区别在于实体名称的优点为便于记忆，但兼容性不完美，实体编号则反之。</p>
<a id="more"></a>
<h3 id="html特殊字符"><a href="#html特殊字符" class="headerlink" title="html特殊字符"></a>html特殊字符</h3><p><code>html</code>本身存在很多的特殊字符，像我们常见的<code>Copyright</code>符号<code>©</code>，使用特殊字符需要注意以下几点：</p>
<ul>
<li>这些字符属于<code>unicode</code>字符集，你的文档需要声明为<code>utf-8</code>;</li>
<li>这些字符在<code>html</code>、<code>css</code>、<code>js</code>中的书写方式各有不同，例如向左的箭头<code>⇠</code>，如下：<ul>
<li>HTML： <code>&amp;#8672;</code></li>
<li>CSS：  <code>\21E0</code>,  <code>css</code>的写法需要加上反斜杠，常用在<code>content</code>属性中</li>
<li>JS：   <code>\u21E0</code>，<code>js</code>的写法需在<code>css</code>的基础上前面加个反斜杠+<code>u</code></li>
</ul>
</li>
<li>字符在各浏览器的表现略有区别，使用需谨慎</li>
</ul>
<h5 id="⇠-nbsp-nbsp-箭头类"><a href="#⇠-nbsp-nbsp-箭头类" class="headerlink" title="⇠&nbsp;&nbsp;箭头类"></a>⇠&nbsp;&nbsp;箭头类</h5><table class="zfz_table  " cellpadding="8" cellspacing="0" width="800"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>⇠</td><td>&amp;#8672</td><td>\u21E0</td><td>21E0</td><td>⇢</td><td>&amp;#8674</td><td>\u21E2</td><td class="lasttd">21E2</td></tr><tr><td>⇡</td><td>&amp;#8673</td><td>\u21E1</td><td>21E1</td><td>⇣</td><td>&amp;#8675</td><td>\u21E3</td><td class="lasttd">21E3</td></tr><tr><td>↞</td><td>&amp;#8606</td><td>\u219E</td><td>219E</td><td>↠</td><td>&amp;#8608</td><td>\u21A0</td><td class="lasttd">21A0</td></tr><tr><td>↟</td><td>&amp;#8607</td><td>\u219F</td><td>219F</td><td>↡</td><td>&amp;#8609</td><td>\u21A1</td><td class="lasttd">21A1</td></tr><tr><td>←</td><td>&amp;#8592</td><td>\u2190</td><td>2190</td><td>→</td><td>&amp;#8594</td><td>\u2192</td><td class="lasttd">2192</td></tr><tr><td>↑</td><td>&amp;#8593</td><td>\u2191</td><td>2191</td><td>↓</td><td>&amp;#8595</td><td>\u2193</td><td class="lasttd">2193</td></tr><tr><td>↔</td><td>&amp;#8596</td><td>\u2194</td><td>2194</td><td>↕</td><td>&amp;#8597</td><td>\u2195</td><td class="lasttd">2195</td></tr><tr><td>⇄</td><td>&amp;#8644</td><td>\u21C4</td><td>21C4</td><td>⇅</td><td>&amp;#8645</td><td>\u21C5</td><td class="lasttd">21C5</td></tr><tr><td>↢</td><td>&amp;#8610</td><td>\u21A2</td><td>21A2</td><td>↣</td><td>&amp;#8611</td><td>\u21A3</td><td class="lasttd">21A3</td></tr><tr><td>⇞</td><td>&amp;#8670</td><td>\u21DE</td><td>21DE</td><td>⇟</td><td>&amp;#8671</td><td>\u21DF</td><td class="lasttd">21DF</td></tr><tr><td>↫</td><td>&amp;#8619</td><td>\u21AB</td><td>21AB</td><td>↬</td><td>&amp;#8620</td><td>\u21AC</td><td class="lasttd">21AC</td></tr><tr><td>⇜</td><td>&amp;#8668</td><td>\u21DC</td><td>21DC</td><td>⇝</td><td>&amp;#8669</td><td>\u21DD</td><td class="lasttd">21DD</td></tr><tr><td>↚</td><td>&amp;#8602</td><td>\u219A</td><td>219A</td><td>↛</td><td>&amp;#8603</td><td>\u219B</td><td class="lasttd">219B</td></tr><tr><td>↮</td><td>&amp;#8622</td><td>\u21AE</td><td>21AE</td><td>↭</td><td>&amp;#8621</td><td>\u21AD</td><td class="lasttd">21AD</td></tr><tr><td>⇦</td><td>&amp;#8678</td><td>\u21E6</td><td>21E6</td><td>⇨</td><td>&amp;#8680</td><td>\u21E8</td><td class="lasttd">21E8</td></tr><tr><td>⇧</td><td>&amp;#8679</td><td>\u21E7</td><td>21E7</td><td>⇩</td><td>&amp;#8681</td><td>\u21E9</td><td class="lasttd">21E9</td></tr><tr><td>▲</td><td>&amp;#9650</td><td>\u25B2</td><td>25B2</td><td>►</td><td>&amp;#9658</td><td>\u25BA</td><td class="lasttd">25BA</td></tr><tr><td>▼</td><td>&amp;#9660</td><td>\u25BC</td><td>25BC</td><td>◄</td><td>&amp;#9668</td><td>\u25C4</td><td class="lasttd">25C4</td></tr><tr><td>➔</td><td>&amp;#10132</td><td>\u2794</td><td>2794</td><td>➙</td><td>&amp;#10137</td><td>\u2799</td><td class="lasttd">2799</td></tr><tr><td>➨</td><td>&amp;#10152</td><td>\u27A8</td><td>27A8</td><td>➲</td><td>&amp;#10162</td><td>\u27B2</td><td class="lasttd">27B2</td></tr><tr><td>➜</td><td>&amp;#10140</td><td>\u279C</td><td>279C</td><td>➞</td><td>&amp;#10142</td><td>\u279E</td><td class="lasttd">279E</td></tr><tr><td>➟</td><td>&amp;#10143</td><td>\u279F</td><td>279F</td><td>➠</td><td>&amp;#10144</td><td>\u27A0</td><td class="lasttd">27A0</td></tr><tr><td>➤</td><td>&amp;#10148</td><td>\u27A4</td><td>27A4</td><td>➥</td><td>&amp;#10149</td><td>\u27A5</td><td class="lasttd">27A5</td></tr><tr><td>➦</td><td>&amp;#10150</td><td>\u27A6</td><td>27A6</td><td>➧</td><td>&amp;#10151</td><td>\u27A7</td><td class="lasttd">27A7</td></tr><tr><td>➵</td><td>&amp;#10165</td><td>\u27B5</td><td>27B5</td><td>➸</td><td>&amp;#10168</td><td>\u27B8</td><td class="lasttd">27B8</td></tr><tr><td>➼</td><td>&amp;#10172</td><td>\u27BC</td><td>27BC</td><td>➽</td><td>&amp;#10173</td><td>\u27BD</td><td class="lasttd">27BD</td></tr><tr><td>➺</td><td>&amp;#10170</td><td>\u27BA</td><td>27BA</td><td>➳</td><td>&amp;#10163</td><td>\u27B3</td><td class="lasttd">27B3</td></tr><tr><td>↷</td><td>&amp;#8631</td><td>\u21B7</td><td>21B7</td><td>↶</td><td>&amp;#8630</td><td>\u21B6</td><td class="lasttd">21B6</td></tr><tr><td>↻</td><td>&amp;#8635</td><td>\u21BB</td><td>21BB</td><td>↺</td><td>&amp;#8634</td><td>\u21BA</td><td class="lasttd">21BA</td></tr><tr><td>↵</td><td>&amp;#8629</td><td>\u21B5</td><td>21B5</td><td>↯</td><td>&amp;#8623</td><td>\u21AF</td><td class="lasttd">21AF</td></tr><tr><td>➾</td><td>&amp;#10174</td><td>\u27BE</td><td>27BE</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td class="lasttd">&nbsp;</td></tr></tbody></table>

<h5 id="❤-nbsp-nbsp-基本形状类"><a href="#❤-nbsp-nbsp-基本形状类" class="headerlink" title="❤&nbsp;&nbsp;基本形状类"></a>❤&nbsp;&nbsp;基本形状类</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>❤</td><td>&amp;#10084</td><td>\u2764</td><td>2764</td><td>✈</td><td>&amp;#9992</td><td>\u2708</td><td class="lasttd">2708</td></tr><tr><td>★</td><td>&amp;#9733</td><td>\u2605</td><td>2605</td><td>✦</td><td>&amp;#10022</td><td>\u2726</td><td class="lasttd">2726</td></tr><tr><td>☀</td><td>&amp;#9728</td><td>\u2600</td><td>2600</td><td>◆</td><td>&amp;#9670</td><td>\u25C6</td><td class="lasttd">25C6</td></tr><tr><td>◈</td><td>&amp;#9672</td><td>\u25C8</td><td>25C8</td><td>▣</td><td>&amp;#9635</td><td>\u25A3</td><td class="lasttd">25A3</td></tr><tr><td>☻</td><td>&amp;#9787</td><td>\u263B</td><td>263B</td><td>☺</td><td>&amp;#9786</td><td>\u263A</td><td class="lasttd">263A</td></tr><tr><td>☹</td><td>&amp;#9785</td><td>\u2639</td><td>2639</td><td>✉</td><td>&amp;#9993</td><td>\u2709</td><td class="lasttd">2709</td></tr><tr><td>☎</td><td>&amp;#9742</td><td>\u260E</td><td>260E</td><td>☏</td><td>&amp;#9743</td><td>\u260F</td><td class="lasttd">260F</td></tr><tr><td>✆</td><td>&amp;#9990</td><td>\u2706</td><td>2706</td><td>0</td><td>&amp;#65533</td><td>\uFFFD</td><td class="lasttd">FFFD</td></tr><tr><td>☁</td><td>&amp;#9729</td><td>\u2601</td><td>2601</td><td>☂</td><td>&amp;#9730</td><td>\u2602</td><td class="lasttd">2602</td></tr><tr><td>❄</td><td>&amp;#10052</td><td>\u2744</td><td>2744</td><td>☃</td><td>&amp;#9731</td><td>\u2603</td><td class="lasttd">2603</td></tr><tr><td>❈</td><td>&amp;#10056</td><td>\u2748</td><td>2748</td><td>✿</td><td>&amp;#10047</td><td>\u273F</td><td class="lasttd">273F</td></tr><tr><td>❀</td><td>&amp;#10048</td><td>\u2740</td><td>2740</td><td>❁</td><td>&amp;#10049</td><td>\u2741</td><td class="lasttd">2741</td></tr><tr><td>☘</td><td>&amp;#9752</td><td>\u2618</td><td>2618</td><td>❦</td><td>&amp;#10086</td><td>\u2766</td><td class="lasttd">2766</td></tr><tr><td>☕</td><td>&amp;#9749</td><td>\u9749</td><td>9749</td><td>❂</td><td>&amp;#10050</td><td>\u2742</td><td class="lasttd">2742</td></tr><tr><td>☥</td><td>&amp;#9765</td><td>\u2625</td><td>2625</td><td>☮</td><td>&amp;#9774</td><td>\u262E</td><td class="lasttd">262E</td></tr><tr><td>☯</td><td>&amp;#9775</td><td>\u262F</td><td>262F</td><td>☪</td><td>&amp;#9770</td><td>\u262A</td><td class="lasttd">262A</td></tr><tr><td>☤</td><td>&amp;#9764</td><td>\u2624</td><td>2624</td><td>✄</td><td>&amp;#9988</td><td>\u2704</td><td class="lasttd">2704</td></tr><tr><td>✂</td><td>&amp;#9986</td><td>\u2702</td><td>2702</td><td>☸</td><td>&amp;#9784</td><td>\u2638</td><td class="lasttd">2638</td></tr><tr><td>⚓</td><td>&amp;#9875</td><td>\u2693</td><td>2693</td><td>☣</td><td>&amp;#9763</td><td>\u2623</td><td class="lasttd">2623</td></tr><tr><td>⚠</td><td>&amp;#9888</td><td>\u26A0</td><td>26A0</td><td>⚡</td><td>&amp;#9889</td><td>\u26A1</td><td class="lasttd">26A1</td></tr><tr><td>☢</td><td>&amp;#9762</td><td>\u2622</td><td>2622</td><td>♻</td><td>&amp;#9851</td><td>\u267B</td><td class="lasttd">267B</td></tr><tr><td>♿</td><td>&amp;#9855</td><td>\u267F</td><td>267F</td><td>☠</td><td>&amp;#9760</td><td>\u2620</td><td class="lasttd">2620</td></tr></tbody></table>

<h5 id="¥-nbsp-nbsp-货币类"><a href="#¥-nbsp-nbsp-货币类" class="headerlink" title="¥&nbsp;&nbsp;货币类"></a>¥&nbsp;&nbsp;货币类</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>$</td><td>&amp;#36</td><td>\u0024</td><td>0024</td><td>¢</td><td>&amp;#162</td><td>\u00A2</td><td class="lasttd">00A2</td></tr><tr><td>£</td><td>&amp;#163</td><td>\u00A3</td><td>00A3</td><td>¤</td><td>&amp;#164</td><td>\u00A4</td><td class="lasttd">00A4</td></tr><tr><td>€</td><td>&amp;#8364</td><td>\u20AC</td><td>20AC</td><td>¥</td><td>&amp;#165</td><td>\u00A5</td><td class="lasttd">00A5</td></tr><tr><td>₱</td><td>&amp;#8369</td><td>\u20B1</td><td>20B1</td><td>₹</td><td>&amp;#8377</td><td>\u20B9</td><td class="lasttd">20B9</td></tr></tbody></table>

<h5 id="½-nbsp-nbsp-数学类"><a href="#½-nbsp-nbsp-数学类" class="headerlink" title="½&nbsp;&nbsp;数学类"></a>½&nbsp;&nbsp;数学类</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>½</td><td>&amp;#189</td><td>\u00BD</td><td>00BD</td><td>¼</td><td>&amp;#188</td><td>\u00BC</td><td class="lasttd">00BC</td></tr><tr><td>¾</td><td>&amp;#190</td><td>\u00BE</td><td>00BE</td><td>⅓</td><td>&amp;#8531</td><td>\u2153</td><td class="lasttd">2153</td></tr><tr><td>⅔</td><td>&amp;#8532</td><td>\u2154</td><td>2154</td><td>⅛</td><td>&amp;#8539</td><td>\u215B</td><td class="lasttd">215B</td></tr><tr><td>⅜</td><td>&amp;#8540</td><td>\u215C</td><td>215C</td><td>⅝</td><td>&amp;#8541</td><td>\u215D</td><td class="lasttd">215D</td></tr><tr><td>‰</td><td>&amp;#8240</td><td>\u2030</td><td>2030</td><td>%</td><td>&amp;#37</td><td>\u0025</td><td class="lasttd">0025</td></tr><tr><td>&lt;</td><td>&amp;#60</td><td>\u003C</td><td>003C</td><td>&gt;</td><td>&amp;#62</td><td>\u003E</td><td class="lasttd">003E</td></tr></tbody></table>

<h5 id="♫-nbsp-nbsp-音乐符号类"><a href="#♫-nbsp-nbsp-音乐符号类" class="headerlink" title="♫&nbsp;&nbsp;音乐符号类"></a>♫&nbsp;&nbsp;音乐符号类</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>♩</td><td>&amp;#9833</td><td>\u2669</td><td>2669</td><td>♪</td><td>&amp;#9834</td><td>\u266A</td><td class="lasttd">266A</td></tr><tr><td>♫</td><td>&amp;#9835</td><td>\u266B</td><td>266B</td><td>♬</td><td>&amp;#9836</td><td>\u266C</td><td class="lasttd">266C</td></tr><tr><td>♭</td><td>&amp;#9837</td><td>\u266D</td><td>266D</td><td>♯</td><td>&amp;#9839</td><td>\u266F</td><td class="lasttd">266F</td></tr></tbody></table>

<h5 id="✖-nbsp-nbsp-对错号"><a href="#✖-nbsp-nbsp-对错号" class="headerlink" title="✖&nbsp;&nbsp;对错号"></a>✖&nbsp;&nbsp;对错号</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>&nbsp;</td><td>&amp;#160</td><td>\u00A0</td><td>00A0</td><td>☐</td><td>&amp;#9744</td><td>\u2610</td><td class="lasttd">2610</td></tr><tr><td>☑</td><td>&amp;#9745</td><td>\u2611</td><td>2611</td><td>☒</td><td>&amp;#9746</td><td>\u2612</td><td class="lasttd">2612</td></tr><tr><td>✓</td><td>&amp;#10003</td><td>\u2713</td><td>2713</td><td>✔</td><td>&amp;#10004</td><td>\u2714</td><td class="lasttd">2714</td></tr><tr><td>✕</td><td>&amp;#10005</td><td>\u10005</td><td>10005</td><td>✖</td><td>&amp;#10006</td><td>\u2716</td><td class="lasttd">2716</td></tr><tr><td>✗</td><td>&amp;#10007</td><td>\u2717</td><td>2717</td><td>✘</td><td>&amp;#10008</td><td>\u2718</td><td class="lasttd">2718</td></tr></tbody></table>

<h5 id="★-nbsp-nbsp-全都是星星"><a href="#★-nbsp-nbsp-全都是星星" class="headerlink" title="★&nbsp;&nbsp;全都是星星"></a>★&nbsp;&nbsp;全都是星星</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>★</td><td>&amp;#9733</td><td>\u2605</td><td>2605</td><td>✭</td><td>&amp;#10029</td><td>\u272D</td><td class="lasttd">272D</td></tr><tr><td>✮</td><td>&amp;#10030</td><td>\u272E</td><td>272E</td><td>☆</td><td>&amp;#9734</td><td>\u2606</td><td class="lasttd">2606</td></tr><tr><td>✪</td><td>&amp;#10026</td><td>\u272A</td><td>272A</td><td>✡</td><td>&amp;#10017</td><td>\u2721</td><td class="lasttd">2721</td></tr><tr><td>✯</td><td>&amp;#10031</td><td>\u272F</td><td>272F</td><td>✵</td><td>&amp;#10037</td><td>\u2735</td><td class="lasttd">2735</td></tr><tr><td>✶</td><td>&amp;#10038</td><td>\u2736</td><td>2736</td><td>✸</td><td>&amp;#10040</td><td>\u2738</td><td class="lasttd">2738</td></tr><tr><td>✹</td><td>&amp;#10041</td><td>\u2739</td><td>2739</td><td>✺</td><td>&amp;#10042</td><td>\u273A</td><td class="lasttd">273A</td></tr><tr><td>✱</td><td>&amp;#10033</td><td>\u2731</td><td>2731</td><td>✲</td><td>&amp;#10034</td><td>\u2732</td><td class="lasttd">2732</td></tr><tr><td>✴</td><td>&amp;#10036</td><td>\u2734</td><td>2734</td><td>✳</td><td>&amp;#10035</td><td>\u2733</td><td class="lasttd">2733</td></tr><tr><td>✻</td><td>&amp;#10043</td><td>\u273B</td><td>273B</td><td>✽</td><td>&amp;#10045</td><td>\u273D</td><td class="lasttd">273D</td></tr><tr><td>❋</td><td>&amp;#10059</td><td>\u274B</td><td>274B</td><td>❆</td><td>&amp;#10054</td><td>\u2746</td><td class="lasttd">2746</td></tr><tr><td>❄</td><td>&amp;#10052</td><td>\u2744</td><td>2744</td><td>❅</td><td>&amp;#10053</td><td>\u2745</td><td class="lasttd">2745</td></tr></tbody></table>

<h5 id="♒-nbsp-nbsp-星座类"><a href="#♒-nbsp-nbsp-星座类" class="headerlink" title="♒&nbsp;&nbsp;星座类"></a>♒&nbsp;&nbsp;星座类</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>♈</td><td>&amp;#9800</td><td>\u2648</td><td>2648</td><td>♉</td><td>&amp;#9801</td><td>\u2649</td><td class="lasttd">2649</td></tr><tr><td>♊</td><td>&amp;#9802</td><td>\u264A</td><td>264A</td><td>♋</td><td>&amp;#9803</td><td>\u264B</td><td class="lasttd">264B</td></tr><tr><td>♌</td><td>&amp;#9804</td><td>\u264C</td><td>264C</td><td>♍</td><td>&amp;#9805</td><td>\u264D</td><td class="lasttd">264D</td></tr><tr><td>♎</td><td>&amp;#9806</td><td>\u264E</td><td>264E</td><td>♏</td><td>&amp;#9807</td><td>\u264F</td><td class="lasttd">264F</td></tr><tr><td>♐</td><td>&amp;#9808</td><td>\u2650</td><td>2650</td><td>♑</td><td>&amp;#9809</td><td>\u2651</td><td>2651</td></tr><tr><td>♒</td><td>&amp;#9810</td><td>\u2652</td><td>2652</td><td>♓</td><td>&amp;#9811</td><td>\u2653</td><td class="lasttd">2653</td></tr></tbody></table>

<h5 id="♚-nbsp-nbsp-国际象棋类"><a href="#♚-nbsp-nbsp-国际象棋类" class="headerlink" title="♚&nbsp;&nbsp;国际象棋类"></a>♚&nbsp;&nbsp;国际象棋类</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>♚</td><td>&amp;#9818</td><td>\u265A</td><td>265A</td><td>♛</td><td>&amp;#9819</td><td>\u265B</td><td class="lasttd">265B</td></tr><tr><td>♜</td><td>&amp;#9820</td><td>\u265C</td><td>265C</td><td>♝</td><td>&amp;#9821</td><td>\u265D</td><td class="lasttd">265D</td></tr><tr><td>♞</td><td>&amp;#9822</td><td>\u265E</td><td>265E</td><td>♟</td><td>&amp;#9823</td><td>\u265F</td><td class="lasttd">265F</td></tr><tr><td>♔</td><td>&amp;#9812</td><td>\u2654</td><td>2654</td><td>♕</td><td>&amp;#9813</td><td>\u2655</td><td class="lasttd">2655</td></tr><tr><td>♖</td><td>&amp;#9814</td><td>\u2656</td><td>2656</td><td>♗</td><td>&amp;#9815</td><td>\u2657</td><td class="lasttd">2657</td></tr><tr><td>♘</td><td>&amp;#9816</td><td>\u2658</td><td>2658</td><td>♙</td><td>&amp;#9817</td><td>\u2659</td><td class="lasttd">2659</td></tr></tbody></table>

<h5 id="♣-nbsp-nbsp-扑克牌类"><a href="#♣-nbsp-nbsp-扑克牌类" class="headerlink" title="♣&nbsp;&nbsp;扑克牌类"></a>♣&nbsp;&nbsp;扑克牌类</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>♠</td><td>&amp;#9824</td><td>\u2660</td><td>2660</td><td>♣</td><td>&amp;#9827</td><td>\u2663</td><td class="lasttd">2663</td></tr><tr><td>♥</td><td>&amp;#9829</td><td>\u2665</td><td>2665</td><td>♦</td><td>&amp;#9830</td><td>\u2666</td><td class="lasttd">2666</td></tr><tr><td>♤</td><td>&amp;#9828</td><td>\u2664</td><td>2664</td><td>♧</td><td>&amp;#9831</td><td>\u2667</td><td class="lasttd">2667</td></tr><tr><td>♡</td><td>&amp;#9825</td><td>\u2661</td><td>2661</td><td>♢</td><td>&amp;#9826</td><td>\u2662</td><td class="lasttd">2662</td></tr></tbody></table>

<h5 id="Ω-nbsp-nbsp-希腊字母"><a href="#Ω-nbsp-nbsp-希腊字母" class="headerlink" title="Ω&nbsp;&nbsp;希腊字母"></a>Ω&nbsp;&nbsp;希腊字母</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>Α</td><td>&amp;#913</td><td>\u0391</td><td>0391</td><td>Β</td><td>&amp;#914</td><td>\u0392</td><td class="lasttd">0392</td></tr><tr><td>Γ</td><td>&amp;#915</td><td>\u0393</td><td>0393</td><td>Δ</td><td>&amp;#916</td><td>\u0394</td><td class="lasttd">0394</td></tr><tr><td>Ε</td><td>&amp;#917</td><td>\u0395</td><td>0395</td><td>Ζ</td><td>&amp;#918</td><td>\u0396</td><td class="lasttd">0396</td></tr><tr><td>Η</td><td>&amp;#919</td><td>\u0397</td><td>0397</td><td>Θ</td><td>&amp;#920</td><td>\u0398</td><td class="lasttd">0398</td></tr><tr><td>Ι</td><td>&amp;#921</td><td>\u0399</td><td>0399</td><td>Κ</td><td>&amp;#922</td><td>\u039A</td><td class="lasttd">039A</td></tr><tr><td>Λ</td><td>&amp;#923</td><td>\u039B</td><td>039B</td><td>Μ</td><td>&amp;#924</td><td>\u039C</td><td class="lasttd">039C</td></tr><tr><td>Ν</td><td>&amp;#925</td><td>\u039D</td><td>039D</td><td>Ξ</td><td>&amp;#926</td><td>\u039E</td><td class="lasttd">039E</td></tr><tr><td>Ο</td><td>&amp;#927</td><td>\u039F</td><td>039F</td><td>Π</td><td>&amp;#928</td><td>\u03A0</td><td class="lasttd">03A0</td></tr><tr><td>Ρ</td><td>&amp;#929</td><td>\u03A1</td><td>03A1</td><td>Σ</td><td>&amp;#931</td><td>\u03A3</td><td class="lasttd">03A3</td></tr><tr><td>Τ</td><td>&amp;#932</td><td>\u03A4</td><td>03A4</td><td>Υ</td><td>&amp;#933</td><td>\u03A5</td><td class="lasttd">03A5</td></tr><tr><td>Φ</td><td>&amp;#934</td><td>\u03A6</td><td>03A6</td><td>Χ</td><td>&amp;#935</td><td>\u03A7</td><td class="lasttd">03A7</td></tr><tr><td>Ψ</td><td>&amp;#936</td><td>\u03A8</td><td>03A8</td><td>Ω</td><td>&amp;#937</td><td>\u03A9</td><td class="lasttd">03A9</td></tr></tbody></table>

<h5 id="☩-nbsp-nbsp-十字"><a href="#☩-nbsp-nbsp-十字" class="headerlink" title="☩&nbsp;&nbsp;十字"></a>☩&nbsp;&nbsp;十字</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>☨</td><td>&amp;#9768</td><td>\u2628</td><td>2628</td><td>☩</td><td>&amp;#9769</td><td>\u2629</td><td class="lasttd">2629</td></tr><tr><td>✝</td><td>&amp;#10013</td><td>\u271D</td><td>271D</td><td>✞</td><td>&amp;#10014</td><td>\u271E</td><td class="lasttd">271E</td></tr><tr><td>✟</td><td>&amp;#10015</td><td>\u271F</td><td>271F</td><td>✠</td><td>&amp;#10016</td><td>\u2720</td><td class="lasttd">2720</td></tr><tr><td>✚</td><td>&amp;#10010</td><td>\u271A</td><td>271A</td><td>†</td><td>&amp;#8224</td><td>\u2020</td><td class="lasttd">2020</td></tr><tr><td>✢</td><td>&amp;#10018</td><td>\u2722</td><td>2722</td><td>✤</td><td>&amp;#10020</td><td>\u2724</td><td class="lasttd">2724</td></tr><tr><td>✣</td><td>&amp;#10019</td><td>\u2723</td><td>2723</td><td>✥</td><td>&amp;#10021</td><td>\u2725</td><td class="lasttd">2725</td></tr></tbody></table>

<h5 id="©-nbsp-nbsp-法律符号"><a href="#©-nbsp-nbsp-法律符号" class="headerlink" title="©&nbsp;&nbsp;法律符号"></a>©&nbsp;&nbsp;法律符号</h5><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>®</td><td>&amp;#174</td><td>\u00AE</td><td>00AE</td><td>©</td><td>&amp;#169</td><td>\u00A9</td><td class="lasttd">00A9</td></tr><tr><td>℗</td><td>&amp;#8471</td><td>\u2117</td><td>2117</td><td>™</td><td>&amp;#153</td><td>\u0099</td><td class="lasttd">0099</td></tr><tr><td>℠</td><td>&amp;#8480</td><td>\u2120</td><td>2120</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td class="lasttd">&nbsp;</td></tr></tbody></table>

<h5 id="nbsp-nbsp-标点和符号"><a href="#nbsp-nbsp-标点和符号" class="headerlink" title="@&nbsp;&nbsp;标点和符号"></a>@&nbsp;&nbsp;标点和符号</h5><p></p><table class="zfz_table  " cellpadding="8" cellspacing="0"><tbody><tr><th rowspan="2">符号</th><th colspan="3">UNICODE</th><th rowspan="2">符号</th><th colspan="3" class="lasttd">UNICODE</th></tr><tr class="secondtr"><th>HTML</th><th>JS</th><th>CSS</th><th>HTML</th><th>JS</th><th class="lasttd">CSS</th></tr><tr><td>«</td><td>&amp;#171</td><td>\u00AB</td><td>00AB</td><td>»</td><td>&amp;#187</td><td>\u00BB</td><td class="lasttd">00BB</td></tr><tr><td>‹</td><td>&amp;#139</td><td>\u008B</td><td>008B</td><td>›</td><td>&amp;#155</td><td>\u009B</td><td class="lasttd">009B</td></tr><tr><td>“</td><td>&amp;#8220</td><td>\u201C</td><td>201C</td><td>”</td><td>&amp;#8221</td><td>\u201D</td><td class="lasttd">201D</td></tr><tr><td>‘</td><td>&amp;#8216</td><td>\u2018</td><td>2018</td><td>’</td><td>&amp;#8217</td><td>\u2019</td><td class="lasttd">2019</td></tr><tr><td>•</td><td>&amp;#8226</td><td>\u2022</td><td>2022</td><td>◦</td><td>&amp;#9702</td><td>\u25E6</td><td class="lasttd">25E6</td></tr><tr><td>¡</td><td>&amp;#161</td><td>\u00A1</td><td>00A1</td><td>¿</td><td>&amp;#191</td><td>\u00BF</td><td class="lasttd">00BF</td></tr><tr><td>℅</td><td>&amp;#8453</td><td>\u2105</td><td>2105</td><td>№</td><td>&amp;#8470</td><td>\u2116</td><td class="lasttd">2116</td></tr><tr><td>&amp;</td><td>&amp;#38</td><td>\u0026</td><td>0026</td><td>@</td><td>&amp;#64</td><td>\u0040</td><td class="lasttd">0040</td></tr><tr><td>℞</td><td>&amp;#8478</td><td>\u211E</td><td>211E</td><td>℃</td><td>&amp;#8451</td><td>\u2103</td><td class="lasttd">2103</td></tr><tr><td>℉</td><td>&amp;#8457</td><td>\u2109</td><td>2109</td><td>°</td><td>&amp;#176</td><td>\u00B0</td><td class="lasttd">00B0</td></tr><tr><td>|</td><td>&amp;#124</td><td>\u007C</td><td>007C</td><td>¦</td><td>&amp;#166</td><td>\u00A6</td><td class="lasttd">00A6</td></tr><tr><td>–</td><td>&amp;#8211</td><td>\u2013</td><td>2013</td><td>—</td><td>&amp;#8212</td><td>\u2014</td><td class="lasttd">2014</td></tr><tr><td>…</td><td>&amp;#8230</td><td>\u2026</td><td>2026</td><td>¶</td><td>&amp;#182</td><td>\u00B6</td><td class="lasttd">00B6</td></tr><tr><td>&#8764;</td><td>&amp;#8764</td><td>\u223C</td><td>223C</td><td>≠</td><td>&amp;#8800</td><td>\u2260</td><td class="lasttd">2260</td></tr></tbody></table><br><br><p><span>总结归类：</span></p><div><span><span><span>1.特色的</span></span></span></div><table border="0" style="border:0px; font-size:16px; font-style:inherit; font-weight:inherit; margin:0px; outline:0px; padding:0px; vertical-align:baseline; border-spacing:0px; width:662px; height:227px"><tbody><tr><td><span>©</span></td><td><span>&amp;copy;</span></td><td><span>©</span></td><td><span>版权标志</span></td></tr><tr><td><span>|</span></td><td>&nbsp;</td><td><span>|</span></td><td><span>竖线，常用作菜单或导航中的分隔符</span></td></tr><tr><td><span>·</span></td><td><span>&amp;middot;</span></td><td><span>·</span></td><td><span>圆点，有时被用来作为菜单分隔符</span></td></tr><tr><td><span>↑</span></td><td><span>&amp;uarr;</span></td><td><span>↑</span></td><td><span>上箭头，常用作网页“返回页面顶部”标识</span></td></tr><tr><td><span>€</span></td><td><span>&amp;euro;</span></td><td><span>€</span></td><td><span>欧元标识</span></td></tr><tr><td><span>²</span></td><td><span>&amp;sup2;</span></td><td><span>²</span></td><td><span>上标2，数学中的平方，在数字处理中常用到，例如：<span style="border:0px; font-size:12px; font-style:inherit; font-weight:700; margin:0px; outline:0px; padding:0px; vertical-align:baseline">1000²</span></span></td></tr><tr><td><span>½</span></td><td><span>&amp;frac12;</span></td><td><span>½</span></td><td><span>二分之一</span></td></tr><tr><td><span>♥</span></td><td><span>&amp;hearts;</span></td><td><span>♥</span></td><td><span>心型，用来表达你的心</span></td></tr></tbody></table><div><span><span><br><span>2常用的</span></span></span></div><div><table border="0" style="border:0px; font-size:16px; font-style:inherit; font-weight:inherit; margin:0px; outline:0px; padding:0px; vertical-align:baseline; border-spacing:0px; width:325px; height:530px"><tbody><tr><td>&nbsp;</td><td><span>&amp;nbsp;</span></td><td><span>&nbsp;</span></td><td><span>空&#26684;</span></td></tr><tr><td><span>&amp;</span></td><td><span>&amp;amp;</span></td><td><span>&amp;</span></td><td><span>and符号，与</span></td></tr><tr><td><span>“</span></td><td><span>&amp;quot;</span></td><td><span>“</span></td><td><span>引号</span></td></tr><tr><td><span>©</span></td><td><span>&amp;copy;</span></td><td><span>©</span></td><td><span>版权标志</span></td></tr><tr><td><span>®</span></td><td><span>&amp;reg;</span></td><td><span>»</span></td><td><span>注册标志</span></td></tr><tr><td><span>™</span></td><td><span>&amp;trade;</span></td><td><span>™</span></td><td><span>商标标志</span></td></tr><tr><td><span>“</span></td><td><span>&amp;ldquo;</span></td><td><span>“</span></td><td><span>左双引号</span></td></tr><tr><td><span>”</span></td><td><span>&amp;rdquo;</span></td><td><span>”</span></td><td><span>右双引号</span></td></tr><tr><td><span>‘</span></td><td><span>&amp;lsquo;</span></td><td><span>‘</span></td><td><span>做单引号</span></td></tr><tr><td><span>’</span></td><td><span>&amp;rsquo;</span></td><td><span>’</span></td><td><span>右单引号</span></td></tr><tr><td><span>«</span></td><td><span>&amp;laquo;</span></td><td><span>«</span></td><td><span>左三角双引号</span></td></tr><tr><td><span>»</span></td><td><span>&amp;raquo;</span></td><td><span>»</span></td><td><span>右三角双引号</span></td></tr><tr><td><span>‹</span></td><td><span>&amp;lsaquo;</span></td><td><span>‹</span></td><td><span>左三角单引号</span></td></tr><tr><td><span>›</span></td><td><span>&amp;rsaquo;</span></td><td><span>›</span></td><td><span>右三角单引号</span></td></tr><tr><td><span>§</span></td><td><span>&amp;sect;</span></td><td><span>§</span></td><td><span>章节标志</span></td></tr><tr><td><span>¶</span></td><td><span>&amp;para;</span></td><td><span>¶</span></td><td><span>段落标志</span></td></tr><tr><td><span>•</span></td><td><span>&amp;bull;</span></td><td><span>•</span></td><td><span>列表圆点（大）</span></td></tr><tr><td><span>·</span></td><td><span>&amp;middot;</span></td><td><span>·</span></td><td><span>列表圆点（中）</span></td></tr><tr><td><span>…</span></td><td><span>&amp;hellip;</span></td><td><span>…</span></td><td><span>省略号</span></td></tr><tr><td><span>|</span></td><td>&nbsp;</td><td><span>|</span></td><td><span>竖线</span></td></tr><tr><td><span>¦</span></td><td><span>&amp;brvbar;</span></td><td><span>¦</span></td><td><span>断的竖线</span></td></tr><tr><td><span>–</span></td><td><span>&amp;ndash;</span></td><td><span>–</span></td><td><span>短破折号</span></td></tr><tr><td><span>—</span></td><td><span>&amp;mdash;</span></td><td><span>—</span></td><td><span>长破折号</span></td></tr></tbody></table></div><div><span><br><span>3.货币类</span></span></div><div><table border="0"><tbody><tr><td><span>¤</span></td><td><span>&amp;curren;</span></td><td><span>¤</span></td><td><span>一般货币符号</span></td></tr><tr><td><span>$</span></td><td>&nbsp;</td><td><span>$</span></td><td><span>美元符号</span></td></tr><tr><td><span>¢</span></td><td><span>&amp;cent;</span></td><td><span>¢</span></td><td><span>分</span></td></tr><tr><td><span>£</span></td><td><span>&amp;pound;</span></td><td><span>£</span></td><td><span>英镑</span></td></tr><tr><td><span>¥</span></td><td><span>&amp;yen;</span></td><td><span>¥</span></td><td><span>日元</span></td></tr><tr><td><span>€</span></td><td><span>&amp;euro;</span></td><td><span>€</span></td><td><span>欧元</span></td></tr></tbody></table></div><div><span><span>4 数学类</span></span></div><div><table border="0"><tbody><tr><td><span>&lt;</span></td><td><span>&amp;lt;</span></td><td><span>&lt;</span></td><td><span>小于号</span></td></tr><tr><td><span>&gt;</span></td><td><span>&amp;gt;</span></td><td><span>&gt;</span></td><td><span>大于号</span></td></tr><tr><td><span>≤</span></td><td><span>&amp;le;</span></td><td><span>≤</span></td><td><span>小于等于号</span></td></tr><tr><td><span>≥</span></td><td><span>&amp;ge;</span></td><td><span>≥</span></td><td><span>大于等于号</span></td></tr><tr><td><span>×</span></td><td><span>&amp;times;</span></td><td><span>×</span></td><td><span>乘号</span></td></tr><tr><td><span>÷</span></td><td><span>&amp;divide;</span></td><td><span>÷</span></td><td><span>除号</span></td></tr><tr><td><span>−</span></td><td><span>&amp;minus;</span></td><td><span>−</span></td><td><span>减号</span></td></tr><tr><td><span>±</span></td><td><span>&amp;plusmn;</span></td><td><span>±</span></td><td><span>加/减 号</span></td></tr><tr><td><span>≠</span></td><td><span>&amp;ne;</span></td><td><span>≠</span></td><td><span>不等于号</span></td></tr><tr><td><span>¹</span></td><td><span>&amp;sup1;</span></td><td><span>¹</span></td><td><span>上标1</span></td></tr><tr><td><span>²</span></td><td><span>&amp;sup2;</span></td><td><span>²</span></td><td><span>上标2</span></td></tr><tr><td><span>³</span></td><td><span>&amp;sup3;</span></td><td><span>³</span></td><td><span>上标3</span></td></tr><tr><td><span>½</span></td><td><span>&amp;frac12;</span></td><td><span>½</span></td><td><span>二分之一</span></td></tr><tr><td><span>¼</span></td><td><span>&amp;frac14;</span></td><td><span>¼</span></td><td><span>四分之一</span></td></tr><tr><td><span>¾</span></td><td><span>&amp;frac34;</span></td><td><span>¾</span></td><td><span>四分之三</span></td></tr><tr><td><span>‰</span></td><td><span>&amp;permil;</span></td><td><span>‰</span></td><td><span>千分率</span></td></tr><tr><td><span>°</span></td><td><span>&amp;deg;</span></td><td><span>°</span></td><td><span>度</span></td></tr><tr><td><span>√</span></td><td><span>&amp;radic;</span></td><td><span>√</span></td><td><span>平方根</span></td></tr><tr><td><span>∞</span></td><td><span>&amp;infin;</span></td><td><span>∞</span></td><td><span>无限大</span></td></tr></tbody></table></div><div><span><span><span>5.方向类</span></span></span></div><div><table border="0"><tbody><tr><td><span>←</span></td><td><span>&amp;larr;</span></td><td><span>←</span></td><td><span>左箭头</span></td></tr><tr><td><span>↑</span></td><td><span>&amp;uarr;</span></td><td><span>↑</span></td><td><span>上箭头</span></td></tr><tr><td><span>→</span></td><td><span>&amp;rarr;</span></td><td><span>→</span></td><td><span>右箭头</span></td></tr><tr><td><span>↓</span></td><td><span>&amp;darr;</span></td><td><span>↓</span></td><td><span>下箭头</span></td></tr><tr><td><span>↔</span></td><td><span>&amp;harr;</span></td><td><span>↔</span></td><td><span>左右箭头</span></td></tr><tr><td><span>↵</span></td><td><span>&amp;crarr;</span></td><td><span>↵</span></td><td><span>回车箭头</span></td></tr><tr><td><span>⌈</span></td><td><span>&amp;lceil;</span></td><td><span>⌈</span></td><td><span>左上限</span></td></tr><tr><td><span><span>⌉</span></span></td><td><span>&amp;rceil;</span></td><td><span>⌉</span></td><td><span>右上限</span></td></tr><tr><td><span><span>⌊</span></span></td><td><span>&amp;lfloor;</span></td><td><span>⌊</span></td><td><span>左下限</span></td></tr><tr><td><span><span>⌋</span></span></td><td><span>&amp;rfloor;</span></td><td><span>⌋</span></td><td><span>右下限</span></td></tr></tbody></table></div><div><span><span><span>6&nbsp;</span><span>其它</span></span></span></div><p><table border="0"><tbody><tr><td><span>♠</span></td><td><span>&amp;spades;</span></td><td><span>♠</span></td><td><span>黑桃</span></td></tr><tr><td><span>♣</span></td><td><span>&amp;clubs;</span></td><td><span>♣</span></td><td><span>梅花</span></td></tr><tr><td><span>♥</span></td><td><span>&amp;hearts;</span></td><td><span>♥</span></td><td><span>红桃，心</span></td></tr><tr><td><span>♦</span></td><td><span>&amp;diams;</span></td><td><span>♦</span></td><td><span>方块牌</span></td></tr><tr><td><span>◊</span></td><td><span>&amp;loz;</span></td><td><span>◊</span></td><td><span>菱形</span></td></tr><tr><td><span>†</span></td><td><span>&amp;dagger;</span></td><td><span>†</span></td><td><span>匕首</span></td></tr><tr><td><span>‡</span></td><td><span>&amp;Dagger;</span></td><td><span>‡</span></td><td><span>双剑号</span></td></tr><tr><td><span>¡</span></td><td><span>&amp;iexcl;</span></td><td><span>¡</span></td><td><span>反向感叹号</span></td></tr><tr><td><span>¿</span></td><td><span>&amp;iquest;</span></td><td><span>¿</span></td><td><span>反向问号</span></td></tr></tbody></table><span><span><br></span></span></p><p><span><span><br></span></span></p><p><span><span>原文：<a target="_blank" href="http://zhengmifan.com/news/notebook/801">http://zhengmifan.com/news/notebook/801</a></span></span></p>

<p>参考：</p>
<ul>
<li><a href="http://114.xixik.com/character/" target="_blank" rel="external">http://114.xixik.com/character/</a></li>
<li><a href="http://www.gzui.net/465" target="_blank" rel="external">http://www.gzui.net/465</a></li>
<li><a href="http://zhengmifan.com/news/notebook/801" target="_blank" rel="external">http://zhengmifan.com/news/notebook/801</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      HTML CSS 特殊字符表
    
    </summary>
    
      <category term="web" scheme="http://007sair.github.io/categories/web/"/>
    
    
      <category term="web" scheme="http://007sair.github.io/tags/web/"/>
    
      <category term="unicode" scheme="http://007sair.github.io/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Tricks</title>
    <link href="http://007sair.github.io/2016/06/22/js-tricks/"/>
    <id>http://007sair.github.io/2016/06/22/js-tricks/</id>
    <published>2016-06-21T16:00:00.000Z</published>
    <updated>2017-08-23T01:48:01.382Z</updated>
    
    <content type="html"><![CDATA[<p>在这篇文章中将整理一些平时用到的js小技巧。这些小技巧可能在你的实际工作中或许能帮助你解决一些问题。</p>
<h3 id="使用-操作符转换布尔值"><a href="#使用-操作符转换布尔值" class="headerlink" title="使用!!操作符转换布尔值"></a>使用!!操作符转换布尔值</h3><p>有时候我们需要对一个变量检查其是否存在或者检查值是否有一个有效值，如果存在就返回<code>true</code>值。为了做这样的验证，我们可以使用<code>!!</code>操作符来实现是非常的方便与简单。对于变量可以使用<code>!!variable</code>做检测，只要变量的值为:<code>0</code>、<code>null</code>、<code>&quot; &quot;</code>、<code>undefined</code>或者<code>NaN</code>都将返回的是<code>false</code>，反之返回的是<code>true</code>。比如下面的示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account</span>(<span class="params">cash</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cash = cash;</div><div class="line">    <span class="keyword">this</span>.hasMoney = !!cash;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> account = <span class="keyword">new</span> Account(<span class="number">100.50</span>);</div><div class="line"><span class="built_in">console</span>.log(account.cash); <span class="comment">// 100.50</span></div><div class="line"><span class="built_in">console</span>.log(account.hasMoney); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> emptyAccount = <span class="keyword">new</span> Account(<span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(emptyAccount.cash); <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(emptyAccount.hasMoney); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>在这个示例中，只要<code>account.cash</code>的值大于<code>0</code>，那么<code>account.hasMoney</code>返回的值就是<code>true</code>。</p>
<a id="more"></a>
<h3 id="使用-将字符串转换成数字"><a href="#使用-将字符串转换成数字" class="headerlink" title="使用+将字符串转换成数字"></a>使用+将字符串转换成数字</h3><p>这个技巧非常有用，其非常简单，可以交字符串数据转换成数字，不过其只适合用于字符串数据，否则将返回NaN，比如下面的示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toNumber</span>(<span class="params">strNumber</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> +strNumber;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(toNumber(<span class="string">"1234"</span>)); <span class="comment">// 1234</span></div><div class="line"><span class="built_in">console</span>.log(toNumber(<span class="string">"ACB"</span>)); <span class="comment">// NaN</span></div></pre></td></tr></table></figure>
<p>这个也适用于Date，在本例中，它将返回的是时间戳数字：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(+<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// 1466586198892</span></div></pre></td></tr></table></figure>
<h3 id="并条件符"><a href="#并条件符" class="headerlink" title="并条件符"></a>并条件符</h3><p>如果你有一段这样的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (conected) &#123;</div><div class="line">    login();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你也可以将变量简写，并且使用&amp;&amp;和函数连接在一起，比如上面的示例，可以简写成这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conected &amp;&amp; login();</div></pre></td></tr></table></figure>
<p>如果一些属性或函数存在于一个对象中，你也可以这样做检测，如下面的代码所示：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user &amp;&amp; user.login();</div></pre></td></tr></table></figure>
<h3 id="使用或运算符"><a href="#使用或运算符" class="headerlink" title="使用或运算符"></a>使用或运算符</h3><p>在ES6中有默认参数这一特性。为了在老版本的浏览器中模拟这一特性，可以使用<code>||</code>操作符，并且将将默认值当做第二个参数传入。如果第一个参数返回的值为<code>false</code>，那么第二个值将会认为是一个默认值。如下面这个示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name || <span class="string">"Oliver Queen"</span>;</div><div class="line">    <span class="keyword">this</span>.age = age || <span class="number">27</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> user1 = <span class="keyword">new</span> User();</div><div class="line"><span class="built_in">console</span>.log(user1.name); <span class="comment">// Oliver Queen</span></div><div class="line"><span class="built_in">console</span>.log(user1.age);  <span class="comment">// 27</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> user2 = <span class="keyword">new</span> User(<span class="string">"Barry Allen"</span>, <span class="number">25</span>);</div><div class="line"><span class="built_in">console</span>.log(user2.name);  <span class="comment">// Barry Allen</span></div><div class="line"><span class="built_in">console</span>.log(user2.age);   <span class="comment">// 25</span></div></pre></td></tr></table></figure>
<h3 id="在循环中缓存array-length"><a href="#在循环中缓存array-length" class="headerlink" title="在循环中缓存array.length"></a>在循环中缓存array.length</h3><p>这个技巧很简单，这个在处理一个很大的数组循环时，对性能影响将是非常大的。基本上，大家都会写一个这样的同步迭代的数组：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(array[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果是一个小型数组，这样做很好，如果你要处理的是一个大的数组，这段代码在每次迭代都将会重新计算数组的大小，这将会导致一些延误。为了避免这种现象出现，可以将<code>array.length</code>做一个缓存：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> len = array.length;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(array[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者，这么写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(array[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="检测对象中属性"><a href="#检测对象中属性" class="headerlink" title="检测对象中属性"></a>检测对象中属性</h3><p>当你需要检测一些属性是否存在，避免运行未定义的函数或属性时，这个小技巧就显得很有用。如果你打算定些一些跨兼容的浏览器代码，你也可能会用到这个小技巧。例如，你想使用<code>document.querySelector()</code>来选择一个<code>id</code>，并且让它能兼容IE6浏览器，但是在IE6浏览器中这个函数是不存在的，那么使用这个操作符来检测这个函数是否存在就显得非常的有用，如下面的示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="string">'querySelector'</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"#id"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"id"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> oEvent = &#123;</div><div class="line">     start : <span class="string">"ontouchstart"</span> <span class="keyword">in</span> <span class="built_in">document</span> ? <span class="string">'touchstart'</span> : <span class="string">'mousedown'</span>,</div><div class="line">     end : <span class="string">"ontouchend"</span> <span class="keyword">in</span> <span class="built_in">document</span> ? <span class="string">'touchend'</span> : <span class="string">'mouseup'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个示例中，如果<code>document</code>不存在<code>querySelector</code>函数，那么就会调用<code>docuemnt.getElementById(&quot;id&quot;)</code>。</p>
<p>如果<code>document</code>有<code>ontouchstart</code>属性（或函数），使用<code>touchstart</code>，否则使用<code>mousedown</code></p>
<h3 id="获取数组中最后一个元素"><a href="#获取数组中最后一个元素" class="headerlink" title="获取数组中最后一个元素"></a>获取数组中最后一个元素</h3><p><code>Array.prototype.slice(begin, end)</code>用来获取<code>begin</code>和<code>end</code>之间的数组元素。如果你不设置<code>end</code>参数，将会将数组的默认长度值当作<code>end</code>值。但有些同学可能不知道这个函数还可以接受负值作为参数。如果你设置一个负值作为<code>begin</code>的值，那么你可以获取数组的最后一个元素。如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">-1</span>)); <span class="comment">// [6]</span></div><div class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">-2</span>)); <span class="comment">// [5,6]</span></div><div class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">-3</span>)); <span class="comment">// [4,5,6]</span></div></pre></td></tr></table></figure>
<h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><p>复制数组有三种方法：</p>
<ul>
<li>1.通过<code>Array.prototype.slice()方法</code>，该方法因为不对原数组进行操作，可以通过传入参数0或者不传的方式复制；</li>
<li>2.通过<code>Array.prototype.concat()方法</code>，该方法通过不传参来实现数组的合并以实现复制；</li>
<li>3.最笨的方法，循环遍历老数组，再一个个<code>push</code>到新数组中；</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法1：</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],</div><div class="line">    newArr;</div><div class="line">newArr = arr.slice();</div><div class="line"></div><div class="line"><span class="comment">//方法2：</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],</div><div class="line">    newArr;</div><div class="line">newArr = arr.concat();</div><div class="line"></div><div class="line"><span class="comment">//方法3：</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line">    newArr = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">    newArr.push(arr[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试是否是新数组可以使用<code>arr.sort()</code>后，检测新数组是否也被排序。</p>
<h3 id="数组截断"><a href="#数组截断" class="headerlink" title="数组截断"></a>数组截断</h3><p>这个小技巧主要用来锁定数组的大小，如果用于删除数组中的一些元素来说，是非常有用的。<br>例如，你的数组有<code>10个</code>元素，但你只想只要前五个元素，那么你可以通过<code>array.length = 5</code>来截断数组。如下面这个示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="built_in">console</span>.log(array.length); <span class="comment">// 6</span></div><div class="line">array.length = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(array.length); <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(array); <span class="comment">// [1,2,3]</span></div></pre></td></tr></table></figure>
<h3 id="替换所有"><a href="#替换所有" class="headerlink" title="替换所有"></a>替换所有</h3><p><code>String.replace()</code>函数允许你使用字符串或正则表达式来替换字符串，本身这个函数只替换第一次出现的字符串，不过你可以使用正则表达多中的<code>/g</code>来模拟<code>replaceAll()</code>函数功能：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">"john john"</span>;</div><div class="line"><span class="built_in">console</span>.log(string.replace(<span class="regexp">/hn/</span>, <span class="string">"ana"</span>)); <span class="comment">// "joana john"</span></div><div class="line"><span class="built_in">console</span>.log(string.replace(<span class="regexp">/hn/g</span>, <span class="string">"ana"</span>)); <span class="comment">// "joana joana"</span></div></pre></td></tr></table></figure>
<h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><p>如果你要合并两个数组，一般情况之下你都会使用<code>concat()</code>函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> array2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="built_in">console</span>.log(array1.concat(array2)); <span class="comment">// [1,2,3,4,5,6];</span></div></pre></td></tr></table></figure>
<h3 id="将NodeList或arguments转换成数组"><a href="#将NodeList或arguments转换成数组" class="headerlink" title="将NodeList或arguments转换成数组"></a>将NodeList或arguments转换成数组</h3><p>如果你运行<code>document.querySelectorAll(&#39;p&#39;)</code>函数时，它可能返回DOM元素的数组，也就是<code>NodeList</code>对象。<br><br>但这个对象不具有数组的函数功能，比如<code>sort()</code>、<code>reduce()</code>、<code>map()</code>、<code>filter()</code>等。<br><br>为了让这些原生的数组函数功能也能用于其上面，需要将节点列表转换成数组。可以使用<code>[].slice.call(elements)</code>来实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.querySelectorAll(<span class="string">"p"</span>); <span class="comment">// NodeList</span></div><div class="line"><span class="keyword">var</span> arrayElements = [].slice.call(elements); <span class="comment">// Now the NodeList is an array</span></div><div class="line"><span class="keyword">var</span> arrayElements = <span class="built_in">Array</span>.from(elements); <span class="comment">// This is another way of converting NodeList to Array</span></div></pre></td></tr></table></figure>
<p>另外一个更有说服力的例子就是函数的<code>arguments</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//检测arguments是否为数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testargs</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">arguments</span>.slice);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr.slice);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.constructor == <span class="built_in">Array</span>.constructor, arr.constructor)</div><div class="line">&#125;</div><div class="line">testargs();</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span></div><div class="line"><span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function"><span class="title">false</span> <span class="title">Array</span>(<span class="params"></span>) </span>&#123; [native code] &#125;</div></pre></td></tr></table></figure>
<p>如何转换arguments？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arg2arr</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// or [].slice.call(arguments, 0)</span></div><div class="line">    <span class="built_in">console</span>.log(arr);</div><div class="line">&#125;</div><div class="line">arg2arr(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//[1, 2, 3]</span></div></pre></td></tr></table></figure>
<h3 id="数组元素的洗牌"><a href="#数组元素的洗牌" class="headerlink" title="数组元素的洗牌"></a>数组元素的洗牌</h3><p>对于数组元素的洗牌，不需要使用任何外部的库，比如Lodash，只要这样做：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> result = list.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span> </div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [2,1,3]</span></div></pre></td></tr></table></figure>
<p>转自：<a href="http://www.w3cplus.com/javascript/12-extremely-useful-hacks-for-javascript.html" target="_blank" rel="external">http://www.w3cplus.com/javascript/12-extremely-useful-hacks-for-javascript.html</a></p>
]]></content>
    
    <summary type="html">
    
      javascript tricks, javascript 小技巧
    
    </summary>
    
      <category term="javascript" scheme="http://007sair.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://007sair.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>web动画新选择：requestAnimationFrame</title>
    <link href="http://007sair.github.io/2016/03/28/js-raf/"/>
    <id>http://007sair.github.io/2016/03/28/js-raf/</id>
    <published>2016-03-27T16:00:00.000Z</published>
    <updated>2017-08-23T01:47:58.231Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>作者：If you’ve never written code to animate inside the browser, you can stop reading :)</p>
</blockquote>
<h3 id="requestAnimationFrame是什么？"><a href="#requestAnimationFrame是什么？" class="headerlink" title="requestAnimationFrame是什么？"></a>requestAnimationFrame是什么？</h3><p>在浏览器中，我们通常使用一个定时器（<code>setInterval</code> &amp; <code>setTimeout</code>）来循环每隔几毫秒移动目标物体一次，来让它动起来。 <br><br>如今有一个好消息，浏览器开发商们决定：“嗨，为什么我们不在浏览器里提供这样一个API呢，这样一来我们可以为用户优化他们的动画。”所以，这个<code>requestAnimationFrame()</code>函数就是针对动画效果的API，你可以把它用在DOM上的风格变化或<code>canvas</code>或<code>webGL</code>中。</p>
<h4 id="为什么我们要用它？"><a href="#为什么我们要用它？" class="headerlink" title="为什么我们要用它？"></a>为什么我们要用它？</h4><ul>
<li>浏览器可以优化并行的动画动作，更合理的重新排列动作序列，并把能够合并的动作放在一个渲染周期内完成，从而呈现出更流畅的动画效果。比如，通过requestAnimationFrame()，JS动画能够和CSS动画/变换或SVG SMIL动画同步发生。</li>
<li>另外，如果在一个浏览器标签页里运行一个动画，当这个标签页不可见时，浏览器会暂停它，这会减少CPU，内存的压力，节省电池电量。</li>
</ul>
<a id="more"></a>
<h4 id="和setTimeout、setInterval的区别"><a href="#和setTimeout、setInterval的区别" class="headerlink" title="和setTimeout、setInterval的区别"></a>和setTimeout、setInterval的区别</h4><ul>
<li>setInterval、setTimeout是开发者主动要求浏览器去绘制，但是由于种种问题，浏览器可能会漏掉部分命令</li>
<li>requestAnimationFrame 就是浏览器什么要开始绘制了浏览器自己知道，通过requestAnimationFrame 告诉开发者，这样就不会出现重复绘制丢失的问题了</li>
</ul>
<h3 id="requestAnimationFrame的用法"><a href="#requestAnimationFrame的用法" class="headerlink" title="requestAnimationFrame的用法"></a>requestAnimationFrame的用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//向下兼容，使用setTimeout</span></div><div class="line"><span class="built_in">window</span>.requestAnimFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span>  <span class="built_in">window</span>.requestAnimationFrame       ||</div><div class="line">          <span class="built_in">window</span>.webkitRequestAnimationFrame ||</div><div class="line">          <span class="built_in">window</span>.mozRequestAnimationFrame    ||</div><div class="line">          <span class="function"><span class="keyword">function</span>(<span class="params"> callback </span>)</span>&#123;</div><div class="line">            <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">          &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// usage:</span></div><div class="line"><span class="comment">// instead of setInterval(render, 16) ....</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">animloop</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  requestAnimFrame(animloop);</div><div class="line">  render();</div><div class="line">&#125;)();</div><div class="line"><span class="comment">// place the rAF *before* the render() to assure as close to</span></div><div class="line"><span class="comment">// 60fps with the setTimeout fallback.</span></div></pre></td></tr></table></figure>
<p>Opera浏览器的技术师Erik Möller 把这个函数进行了封装，使得它能更好的兼容各种浏览器。但基本上他的代码就是判断使用4ms还是16ms的延迟，来最佳匹配60fps。<br>下面就是这段代码，你可以使用它，但请注意，这段代码里使用的是标准函数，我给它加上了<code>cancel*</code>方法和兼容各种浏览器引擎前缀。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lastTime = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> vendors = [<span class="string">'ms'</span>, <span class="string">'moz'</span>, <span class="string">'webkit'</span>, <span class="string">'o'</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++x) &#123;</div><div class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vendors[x]+<span class="string">'RequestAnimationFrame'</span>];</div><div class="line">        <span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>[vendors[x]+<span class="string">'CancelAnimationFrame'</span>] </div><div class="line">                                   || <span class="built_in">window</span>[vendors[x]+<span class="string">'CancelRequestAnimationFrame'</span>];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame)</div><div class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback, element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">            <span class="keyword">var</span> timeToCall = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">16</span> - (currTime - lastTime));</div><div class="line">            <span class="keyword">var</span> id = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback(currTime + timeToCall); &#125;, </div><div class="line">              timeToCall);</div><div class="line">            lastTime = currTime + timeToCall;</div><div class="line">            <span class="keyword">return</span> id;</div><div class="line">        &#125;;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.cancelAnimationFrame)</div><div class="line">        <span class="built_in">window</span>.cancelAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">            clearTimeout(id);</div><div class="line">        &#125;;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<p>或者访问作者在<a href="https://gist.github.com/paulirish/1579671" target="_blank" rel="external">Gist</a>上的源码</p>
<h4 id="让我们看看效果"><a href="#让我们看看效果" class="headerlink" title="让我们看看效果"></a>让我们看看效果</h4><iframe style="width: 100%; height: 450px" src="http://jsfiddle.net/XQpzU/4358/embedded/result%2Cjs/"></iframe>

<h3 id="The-requestAnimationFrame-API"><a href="#The-requestAnimationFrame-API" class="headerlink" title="The requestAnimationFrame API"></a>The requestAnimationFrame API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="regexp">/* time */</span> time</span>)</span>&#123;</div><div class="line">  <span class="comment">// time ~= +new Date // the unix time</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//回调函数里的第一个参数可以传入时间。</span></div></pre></td></tr></table></figure>
<h3 id="关于兼容"><a href="#关于兼容" class="headerlink" title="关于兼容"></a>关于兼容</h3><p>使用<a href="http://caniuse.com/#feat=requestanimationframe" target="_blank" title="">can i use</a>查看</p>
<p>转自：<a href="http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/" target="_blank" rel="external">http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/</a></p>
]]></content>
    
    <summary type="html">
    
      web动画新选择：requestAnimationFrame
    
    </summary>
    
      <category term="javascript" scheme="http://007sair.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://007sair.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>移动web开发笔记</title>
    <link href="http://007sair.github.io/2016/02/29/h5-web-keng/"/>
    <id>http://007sair.github.io/2016/02/29/h5-web-keng/</id>
    <published>2016-02-28T16:00:00.000Z</published>
    <updated>2017-08-23T01:47:54.094Z</updated>
    
    <content type="html"><![CDATA[<style>
dd{
    margin-left: 1em;
}
dd:before{
    content: '·';
    font-weight: bold;
    margin-right: 0.5em;
}
</style>

<h2 id="Meta标签"><a href="#Meta标签" class="headerlink" title="Meta标签"></a>Meta标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--让页面强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览。--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--是否添加至主屏幕的页面允许全屏模式浏览；--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--指定的iphone中safari顶端的状态条的样式；--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--关闭数字自动识别为电话号码--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="触摸并按住触摸目标时候，禁止或显示系统默认菜单"><a href="#触摸并按住触摸目标时候，禁止或显示系统默认菜单" class="headerlink" title="触摸并按住触摸目标时候，禁止或显示系统默认菜单"></a>触摸并按住触摸目标时候，禁止或显示系统默认菜单</h2><p>在iOS上，当你触摸并按住触摸的目标，比如一个链接，Safari浏览器将显示链接有关的系统默认菜单。这个属性可以让你禁用系统默认菜单。<br>参考自：<a href="http://www.css88.com/book/css/webkit/behavior/touch-callout.htm" target="_blank">http://www.css88.com/book/css/webkit/behavior/touch-callout.htm</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">-webkit-touch-callout</span>: none</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="禁止用户选中文字"><a href="#禁止用户选中文字" class="headerlink" title="禁止用户选中文字"></a>禁止用户选中文字</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">-webkit-user-select</span>:none;</div><div class="line">    <span class="attribute">user-select</span>:none</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可参考：<a href="http://www.css88.com/book/css/properties/user-interface/user-select.htm" target="_blank">http://www.css88.com/book/css/properties/user-interface/user-select.htm</a></p>
<h2 id="使用特殊链接"><a href="#使用特殊链接" class="headerlink" title="使用特殊链接"></a>使用特殊链接</h2><p>如果你关闭自动识别后 ，又希望某些电话号码能够链接到 iPhone 的拨号功能 ，那么可以通过这样来声明电话链接，</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:12345654321"</span>&gt;</span>打电话给我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:12345654321"</span>&gt;</span>发短信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:longsair@gmail.com"</span>&gt;</span>longsair@gmail.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>或用于单元格：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">onclick</span>=<span class="string">"location.href='tel:122'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="去除URL的控件条"><a href="#去除URL的控件条" class="headerlink" title="去除URL的控件条"></a>去除URL的控件条</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setTimeout(scrollTo,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h2 id="获取滚动条的值"><a href="#获取滚动条的值" class="headerlink" title="获取滚动条的值"></a>获取滚动条的值</h2><p>pc端获取浏览器的滚动条是通过<code>document.scrollTop</code>&amp;<code>document.scrollLeft</code>，但在ios中这两个值是未定义的，因为ios中没有滚动条的概念，Android中通过这两个属性可以正常获取到滚动条的值，那么在iOS中我们该如何获取滚动条的值呢？就是上面两个属性，但是事实证明android也支持这属性，所以索性都用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.scrollY  <span class="built_in">window</span>.scrollX</div></pre></td></tr></table></figure>
<h2 id="Reset-Styles"><a href="#Reset-Styles" class="headerlink" title="Reset Styles"></a>Reset Styles</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Helvetica, STHeiTi, sans-serif; <span class="comment">/* 使用无衬线字体 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span>, <span class="selector-tag">img</span> &#123;</div><div class="line">    <span class="attribute">-webkit-touch-callout</span>: none;    <span class="comment">/* 禁止长按链接与图片弹出菜单 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">-webkit-user-select</span>: none;  <span class="comment">/* 禁止选中文本 */</span></div><div class="line">    <span class="attribute">user-select</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">optgroup</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;</div><div class="line">    <span class="attribute">-webkit-appearance</span>:none;    <span class="comment">/* 去掉webkit默认的表单样式 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">optgroup</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;</div><div class="line">    <span class="attribute">-webkit-tap-highlight-color</span>:<span class="built_in">rgba</span>(0,0,0,0);  <span class="comment">/* 去掉a、input和button点击时的蓝色外边框和灰色半透明背景 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">-webkit-text-size-adjust</span>: none;   <span class="comment">/* 禁止IOS调整字体大小 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-speech-button</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none;  <span class="comment">/* 隐藏Android的语音输入按钮 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">-webkit-touch-calloutt</span>:none;    <span class="comment">/* iOS中如何禁止用户保存图片 复制图片 */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * input placeholder</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123; </div><div class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;    <span class="comment">/* WebKit browsers */</span> </div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-moz-placeholder</span> &#123; </div><div class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;    <span class="comment">/* Mozilla Firefox 4 to 18 */</span></div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123; </div><div class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;    <span class="comment">/* Mozilla Firefox 19+ */</span></div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-ms-input-placeholder</span> &#123; </div><div class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;    <span class="comment">/* Internet Explorer 10+ */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span>&#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;     <span class="comment">/* 设置placeholder时候 focus时候文字没有隐藏 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="h5搜索键盘"><a href="#h5搜索键盘" class="headerlink" title="h5搜索键盘"></a>h5搜索键盘</h2><p>经测试发现需要一下组合，可以使呼起的键盘具有“搜索”或“前往”字样。</p>
<ol>
<li><code>&lt;form&gt;</code> 标签需要具有<code>action</code>属性</li>
<li><code>&lt;input&gt;</code> 标签需要设置<code>type=&quot;search&quot;</code></li>
</ol>
<p>如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>另外，如果要移除搜索框的叉叉图标，可以设置样式<br>::-webkit-search-cancel-button { display: none; }</p>
<h2 id="横屏-amp-竖屏"><a href="#横屏-amp-竖屏" class="headerlink" title="横屏 &amp; 竖屏"></a>横屏 &amp; 竖屏</h2><p>事件：<br>window.orientation，取值：正负90表示横屏模式、0和180表现为竖屏模式；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onorientationchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span>(<span class="built_in">window</span>.orientation)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">-90</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">90</span>:</div><div class="line">        alert(<span class="string">"横屏:"</span> + <span class="built_in">window</span>.orientation);</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">180</span>:</div><div class="line">        alert(<span class="string">"竖屏:"</span> + <span class="built_in">window</span>.orientation);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//竖屏时使用的样式</div><div class="line">&lt;style media="all and (orientation:portrait)" type="text/css"&gt;</div><div class="line"><span class="selector-id">#landscape</span> &#123; <span class="attribute">display</span>: none; &#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> all and (orientation:portrait) &#123;</div><div class="line">    <span class="selector-class">.css</span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//横屏时使用的样式</div><div class="line">&lt;style media="all and (orientation:landscape)" type="text/css"&gt;</div><div class="line"><span class="selector-id">#portrait</span> &#123; <span class="attribute">display</span>: none; &#125;</div><div class="line">&lt;/style&gt; </div><div class="line">@<span class="keyword">media</span> all and (orientation:landscape) &#123;</div><div class="line">    <span class="selector-class">.css</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="audio-amp-vedio在ios端自动播放"><a href="#audio-amp-vedio在ios端自动播放" class="headerlink" title="audio &amp; vedio在ios端自动播放"></a>audio &amp; vedio在ios端自动播放</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oAudio = <span class="keyword">new</span> Audio(<span class="string">'shake.mp3'</span>);</div><div class="line"><span class="keyword">var</span> isAudio = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> fixaudio = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isAudio) &#123;</div><div class="line">        isAudio = <span class="literal">true</span>;</div><div class="line">        oAudio.play();</div><div class="line">        oAudio.pause(); <span class="comment">//这个例子因为是一个摇一摇的背景音乐，不是加载后立即播放，所以用了`oAudio.pause()`</span></div><div class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'touchstart'</span>, fixaudio, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>, fixaudio, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>具体讨论参考：<a href="http://www.cnblogs.com/PeunZhang/archive/2013/02/05/2893093.html" target="_blank">http://www.cnblogs.com/PeunZhang/archive/2013/02/05/2893093.html</a></p>
<h2 id="自动大写与自动修正"><a href="#自动大写与自动修正" class="headerlink" title="自动大写与自动修正"></a>自动大写与自动修正</h2><p>要关闭这两项功能，可以通过autocapitalize 与autocorrect 这两个选项：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocapitalize</span>=<span class="string">"off"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="文件上传-从相机捕获媒体"><a href="#文件上传-从相机捕获媒体" class="headerlink" title="文件上传, 从相机捕获媒体"></a>文件上传, 从相机捕获媒体</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span> = <span class="string">"image/*; capture=camera"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span> = <span class="string">"video/*; capture=camcorder"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span> = <span class="string">"audio/*; capture=microphone"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>使用总结：<br> : ios 有拍照、录像、选取本地图片功能<br> : 部分android只有选取本地图片功能<br> : winphone不支持<br> : input控件默认外观丑陋</p>
<h2 id="基于css的原生滚动"><a href="#基于css的原生滚动" class="headerlink" title="基于css的原生滚动"></a>基于css的原生滚动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: auto;</div><div class="line">    <span class="attribute">-webkit-overflow-scrolling</span>: touch;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;    <span class="comment">/* 隐藏滚动条 */</span></div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="消除transition闪屏"><a href="#消除transition闪屏" class="headerlink" title="消除transition闪屏"></a>消除transition闪屏</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="comment">/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/</span></div><div class="line">    <span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d;</div><div class="line">    <span class="comment">/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/</span></div><div class="line">    <span class="attribute">-webkit-backface-visibility</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="播放视频不全屏"><a href="#播放视频不全屏" class="headerlink" title="播放视频不全屏"></a>播放视频不全屏</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">  1.目前只有ios7+、winphone8+支持自动播放</span></div><div class="line"><span class="comment">  2.支持Airplay的设备（如：音箱、Apple TV)播放</span></div><div class="line"><span class="comment">    x-webkit-airplay="true" </span></div><div class="line"><span class="comment">  3.播放视频不全屏，ios7+、winphone8+支持，部分android4+支持（含华为、小米、魅族）</span></div><div class="line"><span class="comment">    webkit-playsinline="true" </span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">x-webkit-airplay</span>=<span class="string">"true"</span> <span class="attr">webkit-playsinline</span>=<span class="string">"true"</span> <span class="attr">preload</span>=<span class="string">"auto"</span> <span class="attr">autoplay</span> <span class="attr">src</span>=<span class="string">"http://"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="滑屏框架"><a href="#滑屏框架" class="headerlink" title="滑屏框架"></a>滑屏框架</h2><ul>
<li><a href="https://github.com/peunzhang/slip.js" target="_blank">slip.js</a></li>
<li><a href="https://github.com/peunzhang/iSlider" target="_blank">iSlider</a></li>
<li><a href="https://github.com/peunzhang/fullpage" target="_blank">fullpage</a></li>
<li><a href="http://www.swiper.com.cn/" target="_blank">swiper</a></li>
</ul>
<h2 id="模拟-hover伪类"><a href="#模拟-hover伪类" class="headerlink" title="模拟:hover伪类"></a>模拟:hover伪类</h2><p>因为iPhone并没有鼠标指针，所以没有hover事件。那么CSS :hover伪类就没用了。但是iPhone有Touch事件，onTouchStart 类似 onMouseOver，onTouchEnd 类似 onMouseOut。所以我们可以用它来模拟hover。使用Javascript：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myLinks = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myLinks.length; i++)&#123;</div><div class="line">    myLinks[i].addEventListener(’touchstart’, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.className = “hover”;&#125;, <span class="literal">false</span>);</div><div class="line">    myLinks[i].addEventListener(’touchend’, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.className = “”;&#125;, <span class="literal">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后用CSS增加hover效果：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-class">.hover</span> &#123; <span class="comment">/* 你的hover效果 */</span> &#125;</div></pre></td></tr></table></figure>
<p>这样设计一个链接，感觉可以更像按钮。并且，这个模拟可以用在任何元素上。</p>
<h2 id="判断设备类型"><a href="#判断设备类型" class="headerlink" title="判断设备类型"></a>判断设备类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法一：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">browserRedirect</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</div><div class="line">    <span class="keyword">var</span> bIsIpad = ua.match(<span class="regexp">/ipad/i</span>) == <span class="string">"ipad"</span>;</div><div class="line">    <span class="keyword">var</span> bIsIphoneOs = ua.match(<span class="regexp">/iphone os/i</span>) == <span class="string">"iphone os"</span>;</div><div class="line">    <span class="keyword">var</span> bIsMidp = ua.match(<span class="regexp">/midp/i</span>) == <span class="string">"midp"</span>;</div><div class="line">    <span class="keyword">var</span> bIsUc7 = ua.match(<span class="regexp">/rv:1.2.3.4/i</span>) == <span class="string">"rv:1.2.3.4"</span>;</div><div class="line">    <span class="keyword">var</span> bIsUc = ua.match(<span class="regexp">/ucweb/i</span>) == <span class="string">"ucweb"</span>;</div><div class="line">    <span class="keyword">var</span> bIsAndroid = ua.match(<span class="regexp">/android/i</span>) == <span class="string">"android"</span>;</div><div class="line">    <span class="keyword">var</span> bIsCE = ua.match(<span class="regexp">/windows ce/i</span>) == <span class="string">"windows ce"</span>;</div><div class="line">    <span class="keyword">var</span> bIsWM = ua.match(<span class="regexp">/windows mobile/i</span>) == <span class="string">"windows mobile"</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"您的浏览设备为："</span>);</div><div class="line">    <span class="keyword">if</span> (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"phone"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"pc"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//方法二：</span></div><div class="line"><span class="keyword">var</span> deviceAgent = navigator.userAgent.toLowerCase();</div><div class="line"><span class="keyword">var</span> agentID = deviceAgent.match(<span class="regexp">/(iphone|ipod|ipad|android)/</span>);</div><div class="line"><span class="keyword">if</span> (agentID.indexOf(<span class="string">"iphone"</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">    alert(<span class="string">"iphone"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (agentID.indexOf(<span class="string">"ipod"</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">    alert(<span class="string">"ipod"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (agentID.indexOf(<span class="string">"ipad"</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">    alert(<span class="string">"ipad"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (agentID.indexOf(<span class="string">"android"</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">    alert(<span class="string">"android"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h2><p>假设flex容器为<code>.box</code> ，子元素为<code>.item</code>，兼容性自行添加</p>
<p>1、定义容器为flex的布局</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">display</span>: -webkit-flex;  <span class="comment">/*webkit*/</span></div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*行内flex*/</span></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">display</span>: -webkit-inline-flex; <span class="comment">/*webkit*/</span></div><div class="line">    <span class="attribute">display</span>:inline-flex;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">2、定义父容器</div><div class="line"></div><div class="line">```<span class="selector-tag">css</span></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</div><div class="line">    <span class="comment">/*主轴方向：左到右（默认） | 右到左 | 上到下 | 下到上*/</span></div><div class="line"></div><div class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class="line">    <span class="comment">/*换行：不换行（默认） | 换行 | 换行并第一行在下方*/</span></div><div class="line"></div><div class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">    <span class="comment">/*主轴方向和换行简写*/</span></div><div class="line"></div><div class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</div><div class="line">    <span class="comment">/*主轴对齐方式：左对齐（默认） | 右对齐 | 居中对齐 | 两端对齐 | 平均分布*/</span></div><div class="line"></div><div class="line">    <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</div><div class="line">    <span class="comment">/*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></div><div class="line"></div><div class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">    <span class="comment">/*多主轴对齐：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 上下平均分布*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、子元素</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span>&#123;</div><div class="line">    <span class="attribute">order</span>: &lt;integer&gt;;</div><div class="line">    <span class="comment">/*排序：数值越小，越排前，默认为0*/</span></div><div class="line"></div><div class="line">    <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></div><div class="line">    <span class="comment">/*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/</span></div><div class="line"></div><div class="line">    <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></div><div class="line">    <span class="comment">/*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/</span></div><div class="line"></div><div class="line">    <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></div><div class="line">    <span class="comment">/*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/</span></div><div class="line"></div><div class="line">    <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</div><div class="line">    <span class="comment">/*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/</span></div><div class="line"></div><div class="line">    align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">    <span class="comment">/*单独对齐方式：自动（默认） | 顶部对齐 | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      移动端问题小结、总结
    
    </summary>
    
      <category term="web" scheme="http://007sair.github.io/categories/web/"/>
    
    
      <category term="web" scheme="http://007sair.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>sass编译中文出现错误的解决方法</title>
    <link href="http://007sair.github.io/2016/01/12/sass-note/"/>
    <id>http://007sair.github.io/2016/01/12/sass-note/</id>
    <published>2016-01-11T16:00:00.000Z</published>
    <updated>2017-08-23T01:47:48.185Z</updated>
    
    <content type="html"><![CDATA[<p>sass文件编译时候使用ruby环境，在使用koala或者命令行时，会因为中文注释产生如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Syntax error: Invalid GBK character &quot;\xE5&quot;</div><div class="line">     on line 8 of E:\work\sass\sass\_big_box.scss </div><div class="line">     from line 16 of E:\work\sass\sass\main.scss </div><div class="line">Use --trace for backtrace.</div></pre></td></tr></table></figure>
<p>or：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Syntax error: Invalid GBK character &quot;\xE5&quot; </div><div class="line">     on line 2 of E:\work\sass\sass\main.scss </div><div class="line">Use --trace for backtrace.</div></pre></td></tr></table></figure>
<p><strong>解决方法：</strong></p>
<p><strong>1.koala可视化编译工具</strong></p>
<p>找到安装目录里面sass-3.3.7模块下面的engine.rb文件，例如下面路径：</p>
<p>C:\Program Files (x86)\Koala\rubygems\gems\sass-3.3.7\lib\sass</p>
<p>在这个文件里面engine.rb，添加一行代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Encoding.default_external = Encoding.find(&apos;utf-8&apos;)</div></pre></td></tr></table></figure></p>
<p>放在所有的require XXXX 之后即可。</p>
<a id="more"></a>
<p><strong>2.命令行工具同理</strong></p>
<p>找到ruby的安装目录，里面也有sass模块，如这个路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\Ruby\lib\ruby\gems\1.9.1\gems\sass-3.3.14\lib\sass</div></pre></td></tr></table></figure>
<p>在这个文件里面engine.rb，添加一行代码（同方法1）</p>
<p>Encoding.default_external = Encoding.find(‘utf-8’)</p>
<p>放在所有的require XXXX 之后即可。</p>
<blockquote>
<p>转自：<a href="http://www.itnose.net/detail/6089821.html" target="_blank" rel="external">http://www.itnose.net/detail/6089821.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      sass编码报错问题
    
    </summary>
    
      <category term="sass" scheme="http://007sair.github.io/categories/sass/"/>
    
    
      <category term="sass" scheme="http://007sair.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>Web 开发中 20 个很有用的 CSS 库</title>
    <link href="http://007sair.github.io/2015/11/01/css-library/"/>
    <id>http://007sair.github.io/2015/11/01/css-library/</id>
    <published>2015-10-31T16:00:00.000Z</published>
    <updated>2017-08-23T02:34:31.522Z</updated>
    
    <content type="html"><![CDATA[<p>在过去的几年中，CSS已经成为一大部分开发者和设计者的最爱，因为它提供了一系列功能和特性。每个月都有无数个围绕CSS的工具被开发者发布以简化WEB开发。像CSS 库，框架，应用这样的工具能够为开发者做很多事，而且可以使开发者创造出创新立异的WEB应用。</p>
<p>在这篇文件章中我们找到了一系列对开发者有用的CSS库，它们能帮助开发者在一定的期限内取得有创造性和创新性的成果。我们希望这个列表能有助于您的开发并为您提供方便。尽情享受吧！</p>
<h2 id="1-Kite"><a href="#1-Kite" class="headerlink" title="1. Kite"></a>1. <a href="http://hiloki.github.io/kitecss/" target="_blank" rel="external">Kite</a></h2><p><img src="/images/img/css-library-kite.jpg" alt=""></p>
<p>Kite是一个灵活的布局助手CSS库。Kite使用inline-block而不是最新的CSS语法。它注重实际，易于理解且容易使用。Kite用法与flexbox相似：justify-content,等等。你可以很轻松地创建复杂的模块。Kite是基于OOCSS 与 MindBEMding，它可以帮助您快速构建自己的组件。Kite支持几乎所有浏览器，它属于MIT许可。</p>
<a id="more"></a>
<h2 id="2-DynCSS"><a href="#2-DynCSS" class="headerlink" title="2. DynCSS"></a>2. <a href="http://www.vittoriozaccaria.net/dyn-css/#what-is-it" target="_blank" rel="external">DynCSS</a></h2><p><img src="/images/img/css-library-dyncss.jpg" alt=""></p>
<p>DynCSS 将您的CSS解析成-dyn-(attribute)规则。这些规则是模拟浏览器事件(如滚动和缩放)的javascript表达式。其结果会应用到上面指出的CSS属性。你可以将任何CSS属性设置为动态–前提是它对于jQuery的css()方法是可写的。你可以通过附加-dyn-前缀并指定一个引用的javascript表达式来实现。</p>
<h2 id="3-Progressjs"><a href="#3-Progressjs" class="headerlink" title="3. Progressjs"></a>3. <a href="http://usablica.github.io/progress.js/" target="_blank" rel="external">Progressjs</a></h2><p><img src="/images/img/css-library-progressjs.jpg" alt=""></p>
<p>ProgressJs 是一个 JavaScript 和CSS3库，可以帮助开发者创建和管理页面上所有元素的进度。你可以设计自己的进度条模板并且可以轻松自定义它。你也可以用ProgressJs 来为用户显示内容加载（图片，视频等）的进度。它可以用在textbox，textarea 甚至整个body上。</p>
<h2 id="4-Hover-CSS"><a href="#4-Hover-CSS" class="headerlink" title="4. Hover.CSS"></a>4. <a href="http://ianlunn.github.io/Hover/" target="_blank" rel="external">Hover.CSS</a></h2><p><img src="/images/img/css-library-hovercss.jpg" alt=""></p>
<p>Hover.CSS 是一个有用的CSS3悬停效果集合，可用于动作调用，按钮，商标，特性图片等。 自定或直接应用到你自己的元素上都非常的简单。 hover.css可以用多种方式来使用; 可以复制粘贴你喜欢的效果到你自己的样式表里，也可以引用样式表。然后只需向你想要的元素需添加对应效果的class名称即可。如果你只打算使用一个或几个效果，最佳实践是复制粘贴一个效果。</p>
<h2 id="5-Spinkit"><a href="#5-Spinkit" class="headerlink" title="5. Spinkit"></a>5. <a href="http://tobiasahlin.com/spinkit/" target="_blank" rel="external">Spinkit</a></h2><p><img src="/images/img/css-library-spinkit.jpg" alt=""></p>
<p>Spin kit是一个酷炫的加载动画CSS集合。 Spinkit使用CSS动画来创建吸引人的易于自定义的动画。该集合目标不是提供所有浏览器的解决方案–如果你需要支持哪些还没实现CSS动画属性（像是IE9及之前的版本）的浏览器，你需要检测下这些动画属性并实现一个变通方案。</p>
<h2 id="6-Magic-CSS3-Animation"><a href="#6-Magic-CSS3-Animation" class="headerlink" title="6. Magic CSS3 Animation"></a>6. <a href="http://www.minimamente.com/example/magic_animations/" target="_blank" rel="external">Magic CSS3 Animation</a></h2><p><img src="/images/img/css-library-magic-css3.jpg" alt=""></p>
<p>Magic CSS3 Animations 是一个特殊效果的CSS3动画库，你可以免费用于你的web项目。简单的引用CSS样式：magic.css或精简版magic.min.css即可。</p>
<h2 id="7-Bounce-js"><a href="#7-Bounce-js" class="headerlink" title="7. Bounce.js"></a>7. <a href="http://bouncejs.com/" target="_blank" rel="external">Bounce.js</a></h2><p><img src="/images/img/css-library-bouncejs.jpg" alt=""></p>
<p>Bounce.js是一个用来生成不错的CSS3驱动关键帧动画的工具。用于生成动态动画的JS库是在该工具中投入使用。简单地添加一个组件，选择预设，然后你就会得到一个短URL地址或者导出到CSS。</p>
<h2 id="8-ImaCSS"><a href="#8-ImaCSS" class="headerlink" title="8. ImaCSS"></a>8. <a href="https://github.com/akoenig/imacss" target="_blank" rel="external">ImaCSS</a></h2><p><img src="/images/img/css-library-imacss.jpg" alt=""></p>
<p>Imacss是用来将图像文件转换为数据地址的库和应用。该地址可以用来插入到CSS文件中作为背景图片。本质上来讲，它能让你减少所有你对你设计的图片（如图标等）的HTTP请求，并使之能够单个调用。</p>
<h2 id="9-Buttons"><a href="#9-Buttons" class="headerlink" title="9. Buttons"></a>9. <a href="http://alexwolfe.github.io/Buttons/" target="_blank" rel="external">Buttons</a></h2><p><img src="/images/img/css-library-buttons.jpg" alt=""></p>
<p>Buttons是一个可以创建高度自定义、灵活和现代感十足的web按钮的CSS库。该库由Sass+Compass构建，支持正方形、圆角矩形或者圆形的按钮，并且可选是否扁平以及其他自定义的效果（如发光）。所使用到的尺寸、颜色、效果和字体可以通过变量的帮助进行修改，并且可以非常容易的进行扩展。</p>
<h2 id="10-OdoMeter"><a href="#10-OdoMeter" class="headerlink" title="10. OdoMeter"></a>10. <a href="http://github.hubspot.com/odometer/docs/welcome/" target="_blank" rel="external">OdoMeter</a></h2><p><img src="/images/img/css-library-odometer.jpg" alt=""></p>
<p>OdeMeter是一个用来创建一些我们比较熟悉的如“汽车里程显示，机场信息板或角子机”等效果或者面板的JavaScript-CSS库。该库是独立式+轻量级（3kb）的，使用CSS为效果进行转换，所以效率极高（当然也有回退设置）。它简单地将一个给定的元素转换到另一个具有单行函数的预定义的值。</p>
<h2 id="11-Single-Element-CSS-Spinner"><a href="#11-Single-Element-CSS-Spinner" class="headerlink" title="11. Single Element CSS Spinner"></a>11. <a href="http://projects.lukehaas.me/css-loaders/" target="_blank" rel="external">Single Element CSS Spinner</a></h2><p><img src="/images/img/css-library-single-element-css-spinner.jpg" alt=""></p>
<p>Single Element CSS Spinners是一个CSS螺旋动画加载的集合。每个旋转包含一个使用‘loader’ class的div，其文本内容为‘Loading…’。文本是为屏幕阅读器使用的且可用作老浏览器的后退的状态。</p>
<h2 id="12-Ani-js"><a href="#12-Ani-js" class="headerlink" title="12. Ani.js"></a>12. <a href="http://anijs.github.io/" target="_blank" rel="external">Ani.js</a></h2><p><img src="/images/img/css-library-anijs.jpg" alt=""></p>
<p>AniJS是一个CSS动画的声明处理库，它能够使开发更便利且能提高开发速度。它文档完善且易于上手。</p>
<h2 id="13-Beautons"><a href="#13-Beautons" class="headerlink" title="13. Beautons"></a>13. <a href="http://csswizardry.com/beautons/" target="_blank" rel="external">Beautons</a></h2><p><img src="/images/img/css-library-beautons.jpg" alt=""></p>
<p>Beautons是一个用来创建漂亮、简洁按钮的易用库。你可以应用各种样式、函数已经其他的更多内容到按键上，包括改变它们的大小，设置它们的可用与否以及更多设置。</p>
<h2 id="14-typo-css"><a href="#14-typo-css" class="headerlink" title="14. typo.css"></a>14. <a href="http://typo.sofi.sh/" target="_blank" rel="external">typo.css</a></h2><p><img src="/images/img/css-library-typo.jpg" alt=""></p>
<p>typo.css 的目的是，在一致化浏览器排版效果的同时，构建最适合中文阅读的网页排版。本博客就是使用这个库。</p>
<h2 id="15-CSS-Shakes"><a href="#15-CSS-Shakes" class="headerlink" title="15. CSS Shakes"></a>15. <a href="http://elrumordelaluz.github.io/csshake/" target="_blank" rel="external">CSS Shakes</a></h2><p><img src="/images/img/css-library-cssshakes.jpg" alt=""></p>
<p>这是一个能够震动和晃动‘DOM’的CSS类集合。</p>
<h2 id="16-Typebase-css"><a href="#16-Typebase-css" class="headerlink" title="16. Typebase.css"></a>16. <a href="http://devinhunt.github.io/typebase.css/" target="_blank" rel="external">Typebase.css</a></h2><p><img src="/images/img/css-library-typebasecss.jpg" alt=""></p>
<p>Typebase.css是个最小化的、可定制的字体样式表。它有less和SASS版本，所以能够很容易地修改融入现代的Web项目。它提供了所有排版所必要的基础工具且不需添加其他任何设计内容。它被创建用来完成项目发展和成长期时的修改，能和normalize.css很好的工作。</p>
<h2 id="17-Sassline"><a href="#17-Sassline" class="headerlink" title="17. Sassline"></a>17. <a href="https://sassline.com/" target="_blank" rel="external">Sassline</a></h2><p><img src="/images/img/css-library-sassline.jpg" alt=""></p>
<p>在web上使用Sass &amp; rems设置文本到基线网格。Sassline可以用在博客、prototyping以及其他Web项目。它有建议的基础字体样式和混合比例已达到基线网格的良好配合。为每个断点选择一个modular-scale，其运行响应将会更好。</p>
<h2 id="18-TypeSettings"><a href="#18-TypeSettings" class="headerlink" title="18. TypeSettings"></a>18. <a href="http://typesettings.io/" target="_blank" rel="external">TypeSettings</a></h2><p><img src="/images/img/css-library-typesettings.jpg" alt=""></p>
<p>一个Sass工具包，基于modular scale有Ems风格，纵向风格，响应比基于headlines。</p>
<h2 id="19-Type-Rendering-Mix"><a href="#19-Type-Rendering-Mix" class="headerlink" title="19. Type Rendering Mix"></a>19. <a href="http://typerendering.com/" target="_blank" rel="external">Type Rendering Mix</a></h2><p><img src="/images/img/css-library-type-rendering-mix.jpg" alt=""></p>
<p>Type Rendering Mix是个小型的JavaScript库，它允许只有使用核心文本时（在iOS和OS X上）才应用样式，在实现更一致的渲染同时保持高精度原态。</p>
<h2 id="20-Hint-css"><a href="#20-Hint-css" class="headerlink" title="20. Hint.css"></a>20. <a href="http://kushagragour.in/lab/hint/" target="_blank" rel="external">Hint.css</a></h2><p><img src="/images/img/css-library-hintcss.jpg" alt=""></p>
<p>Hint.css是一个使用SASS构建只使用CSS和HTML的提示库。该库使用数据属性、内容属性、伪元素以及CSS3转换。提示框简洁漂亮，有箭头且可放置在父元素的任何一边。</p>
]]></content>
    
    <summary type="html">
    
      Web 开发中 20 个很有用的 CSS 库
    
    </summary>
    
      <category term="css" scheme="http://007sair.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://007sair.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>javascript常用排序和算法</title>
    <link href="http://007sair.github.io/2015/10/27/js-bubble/"/>
    <id>http://007sair.github.io/2015/10/27/js-bubble/</id>
    <published>2015-10-26T16:00:00.000Z</published>
    <updated>2017-08-23T01:47:38.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>核心思想：每次比较相邻的两个值，若后面的值比前面的值小，则交换位置，重复此操作，直到数据从小到大排列看起来像水泡一样冒上去了！</p>
<h4 id="如何交换数据位置？"><a href="#如何交换数据位置？" class="headerlink" title="如何交换数据位置？"></a>如何交换数据位置？</h4><h5 id="使用临时变量"><a href="#使用临时变量" class="headerlink" title="使用临时变量"></a>使用临时变量</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">15</span>;</div><div class="line"><span class="keyword">var</span> b=<span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tmp;</div><div class="line">tmp=a;</div><div class="line">a=b;</div><div class="line">b=tmp;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a是:'</span>+a+<span class="string">', b是:'</span>+b);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="求和再相减"><a href="#求和再相减" class="headerlink" title="求和再相减"></a>求和再相减</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">19</span>;</div><div class="line"><span class="keyword">var</span> b=<span class="number">10</span>;</div><div class="line"></div><div class="line">b=a+b; <span class="comment">//俩人的和先求出来，然后分别算减法就行</span></div><div class="line">a=b-a; <span class="comment">//此时 b是总和 减去a其实就是b的结果</span></div><div class="line">b=b-a; <span class="comment">//同理</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a是:'</span>+a+<span class="string">', b是:'</span>+b);</div></pre></td></tr></table></figure>
<h5 id="求和再相减2"><a href="#求和再相减2" class="headerlink" title="求和再相减2"></a>求和再相减2</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">19</span>;</div><div class="line"><span class="keyword">var</span> b=<span class="number">10</span>;</div><div class="line"></div><div class="line">a=a+b-(b=a); <span class="comment">//简写 其实本质还是求和 相减</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a是:'</span>+a+<span class="string">', b是:'</span>+b);</div></pre></td></tr></table></figure>
<h5 id="乘以0再对换"><a href="#乘以0再对换" class="headerlink" title="乘以0再对换"></a>乘以0再对换</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">19</span>;</div><div class="line"><span class="keyword">var</span> b=<span class="number">10</span>;</div><div class="line"></div><div class="line">b=a+(a=b)*<span class="number">0</span>;  <span class="comment">//这个直接换 其实就是 b=a  a=b</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a是:'</span>+a+<span class="string">', b是:'</span>+b);</div></pre></td></tr></table></figure>
<h5 id="相乘相除"><a href="#相乘相除" class="headerlink" title="相乘相除"></a>相乘相除</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">19</span>;</div><div class="line"><span class="keyword">var</span> b=<span class="number">10</span>;</div><div class="line"></div><div class="line">a=a*b;</div><div class="line">b=a/b;</div><div class="line">a=a/b;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a是:'</span>+a+<span class="string">', b是:'</span>+b);</div></pre></td></tr></table></figure>
<h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">19</span>;</div><div class="line"><span class="keyword">var</span> b=<span class="number">10</span>;</div><div class="line"></div><div class="line">a=a^b;</div><div class="line">b=a^b;</div><div class="line">a=a^b;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a是:'</span>+a+<span class="string">', b是:'</span>+b);</div></pre></td></tr></table></figure>
<p>完整的冒泡排序如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">23</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">22</span>,<span class="number">8</span>,<span class="number">101</span>,<span class="number">9</span>,<span class="number">-100</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> tmp, len=arr.length;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;len<span class="number">-1</span>; j++)&#123;</div><div class="line">			<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</div><div class="line">				tmp=arr[j];</div><div class="line">				arr[j]=arr[j+<span class="number">1</span>];</div><div class="line">				arr[j+<span class="number">1</span>]=tmp;	</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(bubbleSort(arr));</div></pre></td></tr></table></figure>
<p>之所以要len-1，是因为，每次抓两个数比较，所以，最后那个数就不需要了…</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>实现原理：循环数组，每次从数组里面找到最小值，然后和当前的换位置，又是换位置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">23</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">22</span>,<span class="number">8</span>,<span class="number">-1000</span>,<span class="number">101</span>,<span class="number">9</span>,<span class="number">-100</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</div><div class="line">		<span class="keyword">var</span> iMinIndex=i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++)&#123;</div><div class="line">			<span class="keyword">if</span>(arr[j]&lt;arr[iMinIndex])&#123;</div><div class="line">				iMinIndex=j;	</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">var</span> tmp;</div><div class="line">		tmp=arr[i];</div><div class="line">		arr[i]=arr[iMinIndex];</div><div class="line">		arr[iMinIndex]=tmp;	</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(selectionSort(arr));</div></pre></td></tr></table></figure>
<p>iMinIndex就是每次最小值的索引！over………</p>
<p>当然还有很多，后续一一实现，比如插入排序，希尔排序，归并排序，快速排序等…..</p>
]]></content>
    
    <summary type="html">
    
      javascript 冒泡排序，选择排序，算法
    
    </summary>
    
      <category term="javascript" scheme="http://007sair.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://007sair.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript执行效率小结</title>
    <link href="http://007sair.github.io/2015/10/20/js-execution-efficiency/"/>
    <id>http://007sair.github.io/2015/10/20/js-execution-efficiency/</id>
    <published>2015-10-19T16:00:00.000Z</published>
    <updated>2017-08-23T09:59:24.395Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript是一门非常灵活的语言，我们可以随心所欲的书写各种风格的代码，不同风格的代码也必然也会导致执行效率的差异，开发过程中零零散散地接触到许多提高代码性能的方法，整理一下平时比较常见并且容易规避的问题</p>
<h3 id="JS自身执行效率"><a href="#JS自身执行效率" class="headerlink" title="JS自身执行效率"></a>JS自身执行效率</h3><p>Javascript中的作用域链、闭包、原型继承、eval等特性，在提供各种神奇功能的同时也带来了各种效率问题，用之不慎就会导致执行效率低下。</p>
<a id="more"></a>
<h4 id="1、全局导入"><a href="#1、全局导入" class="headerlink" title="1、全局导入"></a>1、全局导入</h4><p>我们在编码过程中多多少少会使用到一些全局变量（window,document,自定义全局变量等等），了解javascript作用域链的人都知道，在局部作用域中访问全局变量需要一层一层遍历整个作用域链直至顶级作用域，而局部变量的访问效率则会更快更高，因此在局部作用域中高频率使用一些全局对象时可以将其导入到局部作用域中，例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、作为参数传入模块</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window,$</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> xxx = <span class="built_in">window</span>.xxx;</div><div class="line">    $(<span class="string">"#xxx1"</span>).xxx();</div><div class="line">    $(<span class="string">"#xxx2"</span>).xxx();</div><div class="line">&#125;)(<span class="built_in">window</span>,jQuery);</div><div class="line"></div><div class="line"><span class="comment">//2、暂存到局部变量</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> doc = <span class="built_in">document</span>;</div><div class="line">    <span class="keyword">var</span> global = <span class="built_in">window</span>.global;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2、eval以及类eval问题"><a href="#2、eval以及类eval问题" class="headerlink" title="2、eval以及类eval问题"></a>2、eval以及类eval问题</h4><p>我们都知道eval可以将一段字符串当做js代码来执行处理，据说使用eval执行的代码比不使用eval的代码慢100倍以上（具体效率我没有测试，有兴趣同学可以测试一下）</p>
<p>JavaScript 代码在执行前会进行类似“预编译”的操作：首先会创建一个当前执行环境下的活动对象，并将那些用 var 申明的变量设置为活动对象的属性，但是此时这些变量的赋值都是 undefined，并将那些以 function 定义的函数也添加为活动对象的属性，而且它们的值正是函数的定义。但是，如果你使用了eval，则eval中的代码（实际上为字符串）无法预先识别其上下文，无法被提前解析和优化，即无法进行预编译的操作。所以，其性能也会大幅度降低</p>
<p>其实现在大家一般都很少会用eval了，这里我想说的是两个类eval的场景(<code>new Function{}</code>,<code>setTimeout</code>,<code>setInterver</code>)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">setTimtout(<span class="string">"alert(1)"</span>,<span class="number">1000</span>);</div><div class="line"></div><div class="line">setInterver(<span class="string">"alert(1)"</span>,<span class="number">1000</span>);</div><div class="line"></div><div class="line">(<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"alert(1)"</span>))();</div></pre></td></tr></table></figure>
<p>上述几种类型代码执行效率都会比较低，因此建议直接传入匿名方法、或者方法的引用给setTimeout方法。</p>
<h4 id="3、闭包结束后释放掉不再被引用的变量"><a href="#3、闭包结束后释放掉不再被引用的变量" class="headerlink" title="3、闭包结束后释放掉不再被引用的变量"></a>3、闭包结束后释放掉不再被引用的变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">"var3"</span>&#125;;</div><div class="line">    <span class="keyword">var</span> b = [<span class="string">"var1"</span>,<span class="string">"var2"</span>];</div><div class="line">    <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementByTagName(<span class="string">"li"</span>);</div><div class="line">    <span class="comment">//****其它变量</span></div><div class="line">    <span class="comment">//***一些运算</span></div><div class="line">    <span class="keyword">var</span> res = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(a.name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<p>上述代码中变量f的返回值是由一个立即执行函数构成的闭包中返回的方法res，该变量保留了对于这个闭包中所有变量（a,b,c等）的引用，因此这两个变量会一直驻留在内存空间中,尤其是对于dom元素的引用对内存的消耗会很大，而我们在res中只使用到了a变量的值，因此，在闭包返回前我们可以将其它变量释放。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">"var3"</span>&#125;;</div><div class="line">    <span class="keyword">var</span> b = [<span class="string">"var1"</span>,<span class="string">"var2"</span>];</div><div class="line">    <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementByTagName(<span class="string">"li"</span>);</div><div class="line">    <span class="comment">//****其它变量</span></div><div class="line">    <span class="comment">//***一些运算</span></div><div class="line">    <span class="comment">//闭包返回前释放掉不再使用的变量</span></div><div class="line">    b = c = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">var</span> res = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(a.name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<h3 id="JS操作dom的效率"><a href="#JS操作dom的效率" class="headerlink" title="JS操作dom的效率"></a>JS操作dom的效率</h3><p>在web开发过程中，前端执行效率的瓶颈往往都是在dom操作上面，dom操作是一件很耗性能的事情，如何才能在dom操作过程中尽量节约性能呢？</p>
<h4 id="1、减少reflow"><a href="#1、减少reflow" class="headerlink" title="1、减少reflow"></a>1、减少reflow</h4><p>什么是reflow？</p>
<p>当 DOM 元素的属性发生变化 (如 color) 时, 浏览器会通知 render 重新描绘相应的元素, 此过程称为 repaint。</p>
<p>如果该次变化涉及元素布局 (如 width), 浏览器则抛弃原有属性, 重新计算并把结果传递给 render 以重新描绘页面元素, 此过程称为 reflow。</p>
<p>减少reflow的方法</p>
<p>先将元素从document中删除，完成修改后再把元素放回原来的位置（当对某元素及其子元素进行大量reflow操作时，1,2两种方法效果才会比较明显）<br>将元素的display设置为”none”，完成修改后再把display修改为原来的值<br>修改多个样式属性时定义class类代替多次修改style属性（for certain同学推荐）<br>大量添加元素到页面时使用documentFragment<br>例如</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>:i++)&#123;</div><div class="line"><span class="keyword">var</span> child = docuemnt.createElement(<span class="string">"li"</span>);</div><div class="line">child.innerHtml = <span class="string">"child"</span>;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"parent"</span>).appendChild(child);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码会多次操作dom，效率比较低，可以改为下面的形式 创建documentFragment，将所有元素加入到docuemntFragment不会改变dom结构，最后将其添加到页面，只进行了一次reflow。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>:i++)&#123;</div><div class="line">    <span class="keyword">var</span> child = docuemnt.createElement(<span class="string">"li"</span>);</div><div class="line">    child.innerHtml = <span class="string">"child"</span>;</div><div class="line">    frag.appendChild(child);</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"parent"</span>).appendChild(frag);</div></pre></td></tr></table></figure>
<h4 id="2、暂存dom状态信息"><a href="#2、暂存dom状态信息" class="headerlink" title="2、暂存dom状态信息"></a>2、暂存dom状态信息</h4><p>当代码中需要多次访问元素的状态信息，在状态不变的情况下我们可以将其暂存到变量中，这样可以避免多次访问dom带来内存的开销，典型的例子就是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ar lis = <span class="built_in">document</span>.getElementByTagName(<span class="string">"li"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;lis.length;i++)&#123;</div><div class="line">    <span class="comment">//***</span></div><div class="line">&#125;</div><div class="line">上述方式会在每一次循环都去访问dom元素，我们可以简单将代码优化如下</div><div class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementByTagName(<span class="string">"li"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>,j=lis.length ;i&lt;j;i++)&#123;</div><div class="line">    <span class="comment">//***</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3、缩小选择器的查找范围"><a href="#3、缩小选择器的查找范围" class="headerlink" title="3、缩小选择器的查找范围 "></a>3、缩小选择器的查找范围 <br></h4><p>查找dom元素时尽量避免大面积遍历页面元素，尽量使用精准选择器，或者指定上下文以缩小查找范围，以jquery为例</p>
<p>少用模糊匹配的选择器：例如$(“[name*=’_fix’]”)，多用诸如id以及逐步缩小范围的复合选择器$(“li.active”)等<br>指定上下文：例如$(“#parent .class”)，$(“.class”,$el)等</p>
<h4 id="4、使用事件委托"><a href="#4、使用事件委托" class="headerlink" title="4、使用事件委托"></a>4、使用事件委托</h4><p>使用场景：一个有大量记录的列表，每条记录都需要绑定点击事件，在鼠标点击后实现某些功能，我们通常的做法是给每条记录都绑定监听事件，这种做法会导致页面会有大量的事件监听器，效率比较低下。</p>
<p>基本原理：我们都知道dom规范中事件是会冒泡的，也就是说在不主动阻止事件冒泡的情况下任何一个元素的事件都会按照dom树的结构逐级冒泡至顶端。而event对象中也提供了event.target（IE下是srcElement）指向事件源，因此我们即使在父级元素上监听该事件也可以找到触发该事件的最原始的元素，这就是委托的基本原理。废话不多说，上示例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul li"</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert($(<span class="keyword">this</span>).attr(<span class="string">"data"</span>));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>上述写法其实是给所有的li元素都绑定了click事件来监听鼠标点击每一个元素的事件，这样页面上会有大量的事件监听器。</p>
<p>根据上面介绍的监听事件的原理我们来改写一下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul"</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(e.target.nodeName.toLowerCase() ===<span class="string">"li"</span>)&#123;</div><div class="line">        alert($(e.target).attr(<span class="string">"data"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这样一来，我们就可以只添加一个事件监听器去捕获所有li上触发的事件，并做出相应的操作。</p>
<p>当然，我们不必每次都做事件源的判断工作，可以将其抽象一下交给工具类来完成。jquery中的delegate()方法就实现了该功能</p>
<p>语法是这样的$(selector).delegate(childSelector,event,data,function)，例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).delegate(<span class="string">"button"</span>,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"p"</span>).slideToggle();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<table width="600"><tr><th width="100" style="text-align:center">参数</th><th style="text-align:center">描述</th></tr><tr><td>childSelector</td><td>必需。规定要附加事件处理程序的一个或多个子元素。</td></tr><tr><td>event</td><td>必需。规定附加到元素的一个或多个事件。由空格分隔多个事件值。必须是有效的事件。</td></tr><tr><td>data</td><td>可选。规定传递到函数的额外数据。</td></tr><tr><td>function</td><td>必需。规定当事件发生时运行的函数。</td></tr></table>


<p>Tips：事件委托还有一个好处就是，即使在事件绑定之后动态添加的元素上触发的事件同样可以监听到哦，这样就不用在每次动态加入元素到页面后都为其绑定事件了</p>
<p>转自：<a href="http://www.cnblogs.com/gewei/archive/2013/03/29/2988180.html" target="_blank" rel="external">http://www.cnblogs.com/gewei/archive/2013/03/29/2988180.html</a></p>
]]></content>
    
    <summary type="html">
    
      Javascript执行效率小结
    
    </summary>
    
      <category term="javascript" scheme="http://007sair.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://007sair.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>escape、encodeURI和encodeURIComponent的区别</title>
    <link href="http://007sair.github.io/2015/09/28/js-encode/"/>
    <id>http://007sair.github.io/2015/09/28/js-encode/</id>
    <published>2015-09-27T16:00:00.000Z</published>
    <updated>2017-08-23T01:47:29.925Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目中用到对一段url进行编码，因此整理如下：</p>
<p>js中对文字的编码涉及3个函数：<a href="http://www.w3school.com.cn/jsref/jsref_escape.asp" target="_blank" title="">escape</a> , <a href="http://www.w3school.com.cn/jsref/jsref_encodeuri.asp" target="_blank" title="">encodeURI</a> , <a href="http://www.w3school.com.cn/jsref/jsref_encodeURIComponent.asp" target="_blank" title="">encodeURIComponent</a>，与之对应的解码函数为：<a href="http://www.w3school.com.cn/jsref/jsref_unescape.asp" target="_blank">unescape()</a>，<a href="http://www.w3school.com.cn/jsref/jsref_decodeURI.asp" target="_blank">decodeURI()</a>，<a href="http://www.w3school.com.cn/jsref/jsref_decodeURIComponent.asp" target="_blank">decodeURIComponent()</a>。</p>
<a id="more"></a>
<p>w3school对其说明如下：</p>
<h4 id="escape"><a href="#escape" class="headerlink" title="escape()"></a>escape()</h4><p>该方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： <code>* @ - _ + . /</code> 。其他所有的字符都会被转义序列替换。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">escape</span>(<span class="string">"Visit W3School!"</span>) + <span class="string">"&lt;br /&gt;"</span>);	<span class="comment">//Visit%20W3School%21</span></div><div class="line"><span class="built_in">document</span>.write(<span class="built_in">escape</span>(<span class="string">"?!=()#%&amp;"</span>));						<span class="comment">//%3F%21%3D%28%29%23%25%26</span></div></pre></td></tr></table></figure>
<p>结论：js使用数据时可以使用escape</p>
<h4 id="encodeURI"><a href="#encodeURI" class="headerlink" title="encodeURI()"></a>encodeURI()</h4><p>该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： <code>- _ . ! ~ * &#39; ( )</code> 。 <br><br>该方法的目的是对 URI 进行完整的编码，因此对以下在 URI 中具有特殊含义的 ASCII 标点符号，encodeURI() 函数是不会进行转义的：;/?:@&amp;=+$,#</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">encodeURI</span>(<span class="string">"http://www.w3school.com.cn"</span>)+ <span class="string">"&lt;br /&gt;"</span>);		<span class="comment">//http://www.w3school.com.cn</span></div><div class="line"><span class="built_in">document</span>.write(<span class="built_in">encodeURI</span>(<span class="string">"http://www.w3school.com.cn/My first/"</span>));		<span class="comment">//http://www.w3school.com.cn/My%20first/</span></div><div class="line"><span class="built_in">document</span>.write(<span class="built_in">encodeURI</span>(<span class="string">",/?:@&amp;=+$#"</span>));								<span class="comment">//,/?:@&amp;=+$#</span></div></pre></td></tr></table></figure>
<p>结论：进行url跳转时可以整体使用encodeURI</p>
<h4 id="encodeURIComponent"><a href="#encodeURIComponent" class="headerlink" title="encodeURIComponent()"></a>encodeURIComponent()</h4><p>该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： <code>- _ . ! ~ * &#39; ( )</code> 。<br><br>其他字符（比如：<code>;/?:@&amp;=+$,#</code> 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">encodeURIComponent</span>(<span class="string">"http://www.w3school.com.cn"</span>));		<span class="comment">//http%3A%2F%2Fwww.w3school.com.cn</span></div><div class="line"><span class="built_in">document</span>.write(<span class="built_in">encodeURIComponent</span>(<span class="string">"http://www.w3school.com.cn/p 1/"</span>));	<span class="comment">//http%3A%2F%2Fwww.w3school.com.cn%2Fp%201%2F</span></div><div class="line"><span class="built_in">document</span>.write(<span class="built_in">encodeURIComponent</span>(<span class="string">",/?:@&amp;=+$#"</span>));						<span class="comment">//%2C%2F%3F%3A%40%26%3D%2B%24%23</span></div></pre></td></tr></table></figure>
<p>结论：传递参数时需要使用encodeURIComponent，这样组合的url才不会被#等特殊字符截断。</p>
<p><strong>综合结论：</strong><br><br>escape()除了 ASCII 字母、数字和特定的符号外，对传进来的字符串全部进行转义编码，因此如果想对URL编码，最好不要使用此方法。 <br><br>encodeURI() 用于编码整个URI,因为URI中的合法字符都不会被编码转换。 <br><br>encodeURIComponent()方法在编码单个URIComponent（指请求参数）应当是最常用的，它可以讲参数中的中文、特殊字符进行转义，而不会影响整个URL。</p>
]]></content>
    
    <summary type="html">
    
      javascript中的编码函数：escape,encodeURI,encodeURIComponent和unescape,decodeURI,decodeURIComponent的介绍
    
    </summary>
    
      <category term="javascript" scheme="http://007sair.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://007sair.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端资源整理</title>
    <link href="http://007sair.github.io/2015/09/25/web-note/"/>
    <id>http://007sair.github.io/2015/09/25/web-note/</id>
    <published>2015-09-24T16:00:00.000Z</published>
    <updated>2017-08-23T01:47:26.293Z</updated>
    
    <content type="html"><![CDATA[<style>
.lotus-post h2{}
.lotus-post h3{ font-size: 1.3em;}
.lotus-post h4{ margin-left: 2em; font-size: 1.1em;}
.lotus-post ul{ margin-left: 5.5em; margin-bottom: 5px;}
.lotus-post li{ font-size: 0.9em;}
.lotus-post p{ margin-bottom: 0.2em;}
</style>

<script>
$(document).ready(function() {
    //为超链接加上target='_blank'属性
    $('a[href^="http"]').each(function() {
        $(this).attr({
            'target' : '_blank',
            'rel' : 'nofollow'
        });
    });
});
</script>

<h3 id="专业类"><a href="#专业类" class="headerlink" title="专业类"></a>专业类</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><ul>
<li><a href="http://ued.sina.com.cn/?p=726" target="_blank" rel="external">HTML5标签使用的常见误区</a></li>
<li><a href="http://stylechen.com/22-html5-tips.html" target="_blank" rel="external">22个HTML5的初级技巧</a> </li>
<li><a href="http://www.html5jscss.com/html5-semantics-section.html" target="_blank" rel="external">HTML5的革新——语义化标签(一)</a></li>
<li><a href="http://mrthink.net/html5-simple-structure/" target="_blank" rel="external">HTML5的革新：结构之美</a></li>
</ul>
<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><ul>
<li><a href="http://www.w3cplus.com/solution/index/index.html" target="_blank" rel="external">css解决方案_W3cplus</a></li>
<li><a href="http://labs.qianduan.net/css-selector/" target="_blank" rel="external">css选择器的浏览器支持</a></li>
<li><a href="http://www.uisdc.com/css-selector" target="_blank" rel="external">css选择器详解</a></li>
<li><a href="http://www.cnblogs.com/leejersey/p/3662612.html" target="_blank" rel="external">css中单位px和em,rem的区别 </a></li>
<li><a href="http://www.w3cplus.com/blog/tags/250.html" target="_blank" rel="external">css3属性详解</a></li>
<li><a href="http://www.ituring.com.cn/article/49353" target="_blank" rel="external">css Reset 详细分析</a></li>
<li><a href="http://www.w3cplus.com/solution/css3content/css3content.html" target="_blank" rel="external">css3 content 生成内容</a></li>
<li><a href="http://www.w3.org/html/ig/zh/wiki/Css3-flexbox/zh-hans#.E4.BC.B8.E7.BC.A9.E8.A1.8C.E6.8D.A2.E8.A1.8C_.E2.80.95.E3.80.8Cflex-wrap.E3.80.8D.E5.B1.9E.E6.80.A7" target="_blank" rel="external">css3-flexbox/zh-hans</a></li>
</ul>
<h4 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h4><ul>
<li><a href="http://www.planabc.net/2008/01/30/javascript_books_recommend/" target="_blank" rel="external">javaScript入门学习书籍的阶段选择</a></li>
<li><a href="http://weizhifeng.net/javascript-the-core.html" target="_blank" rel="external">javascript核心</a></li>
</ul>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul>
<li><a href="http://browserdiet.com/zh/" target="_blank" rel="external">HOW TO LOSE WEIGHT in the browser</a></li>
<li><a href="http://isux.tencent.com/h5-performance.html" target="_blank" rel="external">移动H5前端性能优化指南</a></li>
<li><a href="https://perishablepress.com/cssresetr/" target="_blank" rel="external">cssReset</a></li>
<li><a href="http://necolas.github.io/normalize.css/" target="_blank" rel="external">normalize.css</a></li>
</ul>
<h4 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h4><ul>
<li><a href="https://cnodejs.org/topic/55dec742c61f30df2e65ebda" target="_blank" rel="external">Web前端开发规范文档</a></li>
<li><a href="http://www.w3cfuns.com/blog-5440229-5402622.html" target="_blank" rel="external">百度，淘宝，腾讯三大巨头HTML页面规范分解</a></li>
<li><a href="http://www.css88.com/doc/codeguide/" target="_blank" rel="external">编码规范 by @mdo</a></li>
<li><a href="https://github.com/ecomfe/spec" target="_blank" rel="external">编码规范 from github</a></li>
</ul>
<h3 id="学习类"><a href="#学习类" class="headerlink" title="学习类"></a>学习类</h3><ul>
<li><a href="http://html5ify.com/fks/" target="_blank" rel="external">Frontend Knowledge Structure</a></li>
<li><a href="http://siberiawolf.com/free_programming/index.html" target="_blank" rel="external">免费的编程中文书籍索引</a></li>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="http://www.gbtags.com/gb/gblibrary.htm" target="_blank" rel="external">课程库 - 极客标签</a></li>
<li><a href="http://www.miaov.com/2013/download/video_download.html" target="_blank" rel="external">妙味课堂 - 需购买才能看</a></li>
<li><a href="http://my.oschina.net/smile622/blog/217889" target="_blank" rel="external">一步步学会使用SeaJS 2.0</a></li>
</ul>
<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><h4 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h4><ul>
<li><a href="http://docs.emmet.io/" target="_blank" rel="external">英文文档</a></li>
<li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="external">中文文档</a></li>
</ul>
<h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a>（本文由 @廖雪峰 创作，如果觉得本教程对您有帮助，可以去 iTunes 购买）</li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git简明指南</a></li>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的GIT入门</a></li>
<li><a href="http://gitref.justjavac.com/" target="_blank" rel="external">Git 参考手册</a></li>
<li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="external">Pro Git 中文版</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="external">Git-Cheat-Sheet</a></li>
</ul>
<h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><ul>
<li><a href="http://www.apjs.net/" target="_blank" rel="external">AngularJS中文网</a></li>
<li><a href="http://segmentfault.com/a/1190000000693651" target="_blank" rel="external">React概览</a></li>
<li><a href="http://www.bootcss.com/" target="_blank" rel="external">Bootstrap中文网</a></li>
<li><a href="http://amazeui.org/" target="_blank" rel="external">Amaze UI</a></li>
<li><a href="http://www.foundcss.com/" target="_blank" rel="external">Foundation中文网</a></li>
<li><a href="http://nej.netease.com/" target="_blank" rel="external">Nice Easy Javascript</a></li>
<li><a href="http://nec.netease.com/" target="_blank" rel="external">NEC：更好的css样式解决方案</a></li>
</ul>
<h4 id="压缩工具"><a href="#压缩工具" class="headerlink" title="压缩工具"></a>压缩工具</h4><ul>
<li><a href="http://tool.css-js.com/" target="_blank" rel="external">http://tool.css-js.com/</a></li>
<li><a href="http://tool.oschina.net/" target="_blank" rel="external">在线工具集合</a></li>
<li><a href="http://code.ciaoca.com/" target="_blank" rel="external">前端开发仓库</a></li>
<li><a href="http://www.wufangbo.com/web-development-tools-list/" target="_blank" rel="external">前端开发工具大全-武方博收集整理</a></li>
<li><a href="http://www.w3cfuns.com/tools.php" target="_blank" rel="external">前端开发神器-w3cfuns</a></li>
</ul>
<h3 id="资源类"><a href="#资源类" class="headerlink" title="资源类"></a>资源类</h3><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><ul>
<li><a href="http://wiki.blueidea.com/index.php?title=%E9%A6%96%E9%A1%B5" target="_blank" rel="external">蓝色理想wiki</a></li>
<li><a href="http://www.w3cfuns.com/forum.php?gid=126" target="_blank" rel="external">前端技术专栏 - w3cfuns</a></li>
<li><a href="http://bbs.miaov.com/forum.php" target="_blank" rel="external">妙味</a></li>
<li><a href="http://techbrood.com/" target="_blank" rel="external">领先的HTML5动效搜索和分享引擎 - 踏得网</a></li>
</ul>
<h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><ul>
<li><a href="http://browserhacks.com/#browserhacks" target="_blank" rel="external">Browserhacks - 一个针对hack的网站！！</a></li>
<li><a href="http://www.w3.org/html/ig/zh/wiki/Css3-fonts" target="_blank" rel="external">CSS3字体模块</a></li>
<li><a href="http://www.qiuziti.com/" target="_blank" rel="external">字体下载-求字体网</a></li>
</ul>
<h3 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h3><h4 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h4><ul>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">Gulp 中文网</a></li>
<li><a href="http://segmentfault.com/a/1190000000372547" target="_blank" rel="external">前端构建工具gulp入门教程</a></li>
<li><a href="http://gulpjs.com/plugins/" target="_blank" rel="external">plugin registry</a></li>
<li><a href="https://www.npmjs.com/search?q=gulpplugin" target="_blank" rel="external">npm</a></li>
<li><a href="http://zhuanlan.zhihu.com/TLA42/19691575" target="_blank" rel="external">Gulp —— 另一种自动化流水线</a></li>
</ul>
<h4 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h4><ul>
<li><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="external">sass入门</a></li>
<li><a href="http://www.sass.hk/" target="_blank" rel="external">sass中国</a></li>
<li><a href="http://sass.bootcss.com/docs/sass-reference/" target="_blank" rel="external">sass参考手册</a></li>
<li><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html" target="_blank" rel="external">sass Functions</a></li>
</ul>
<h3 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h3><ul>
<li><a href="http://ziren.org/hobby/the-programmer-loaded-b-guidebook.html" target="_blank" rel="external">程序员装B指南手册</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      整理一些前端需要用到的资源，资源会不断整合
    
    </summary>
    
      <category term="web" scheme="http://007sair.github.io/categories/web/"/>
    
    
      <category term="web" scheme="http://007sair.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>JS 面向对象的程序设计</title>
    <link href="http://007sair.github.io/2015/09/21/js-oop/"/>
    <id>http://007sair.github.io/2015/09/21/js-oop/</id>
    <published>2015-09-20T16:00:00.000Z</published>
    <updated>2017-08-23T01:47:18.337Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象的语言有一个标志，那就是都有类的概念。通过类可以创建任意多个具有相同属性和方法的对象。ECMAScript中没有类的概念，因此它的对象与纯面向对象语言中的对象是不同的。</p>
<a id="more"></a>
<p>ECMA-262把对象定义为：“无序属性的集合，其属性可以包含基本值、对象或者函数”。可以简单理解为JS的对象是一组无序的值，其中的属性或方法都有一个名字，根据这个名字可以访问相映射的值（值可以是基本值/对象/方法）。</p>
<h3 id="一、理解对象"><a href="#一、理解对象" class="headerlink" title="一、理解对象"></a>一、理解对象</h3><h4 id="1、基于Object对象"><a href="#1、基于Object对象" class="headerlink" title="1、基于Object对象"></a>1、基于Object对象</h4><p>创建自定义对象最简单的方法就是创建一个Object的实例，然后再为它添加属性和方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">'Nicholas'</span>;</div><div class="line">person.age = <span class="number">29</span>;</div><div class="line">person.job = <span class="string">'Software Engineer'</span>;</div><div class="line"></div><div class="line">person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="2、字面量方式"><a href="#2、字面量方式" class="headerlink" title="2、字面量方式"></a>2、字面量方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    name : <span class="string">'Nicholas'</span>,</div><div class="line">    age : <span class="number">29</span>,</div><div class="line">	job : <span class="string">'Software Engineer'</span>,</div><div class="line">    sayName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>JS的对象可以使用<code>.</code>操作符动态的扩展其属性，可以使用<code>delete</code>操作符或将属性值设置为<code>undefined</code>来删除属性。如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">person.newAtt=<span class="string">'new Attr'</span>;   	<span class="comment">//添加属性</span></div><div class="line"><span class="built_in">console</span>.log(person.newAtt);     <span class="comment">//new Attr</span></div><div class="line"><span class="keyword">delete</span> person.age;</div><div class="line"><span class="built_in">console</span>.log(person.age);        <span class="comment">//undefined(删除属性后值为undefined);</span></div></pre></td></tr></table></figure>
<h3 id="二、创建对象"><a href="#二、创建对象" class="headerlink" title="二、创建对象"></a>二、创建对象</h3><p>虽然Object构造函数或对象字面量都可以创建单个对象，但这些方式有个明显的缺点：使用同一个接口创建很多对象，会产生大量重复代码。为解决这个问题，人们开始使用工厂模式的一种变体：</p>
<h4 id="1、工厂模式"><a href="#1、工厂模式" class="headerlink" title="1、工厂模式"></a>1、工厂模式</h4><p>工厂模式是软件工程领域一种广为人知的设计模式，这种模式抽象了创建具体对象的过程。因为ECMAScript中无法创建类，开发人员就发明了一种函数，用函数来封装以特定的接口创建对象的细节，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = name;</div><div class="line">    o.age = age;</div><div class="line">    o.job = job;</div><div class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> o;	<span class="comment">//使用return返回生成的对象</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'Nicholas'</span>, <span class="number">29</span>, <span class="string">'SoftWare Engineer'</span>);</div><div class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">'Greg'</span>, <span class="number">27</span>, <span class="string">'Doctor'</span>);</div></pre></td></tr></table></figure>
<p>创建对象交给一个工厂方法来实现，可以传递参数，但主要缺点是无法识别对象类型，因为创建对象都是使用Object的原生构造函数来完成的。</p>
<h4 id="2、构造函数模式"><a href="#2、构造函数模式" class="headerlink" title="2、构造函数模式"></a>2、构造函数模式</h4><p>ECMAScript中的构造函数可用来创建特定类型的对象。像Object和Array这样的原生构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nicholas'</span>, <span class="number">29</span>, <span class="string">'SoftWare Engineer'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Greg'</span>, <span class="number">27</span>, <span class="string">'Doctor'</span>);</div></pre></td></tr></table></figure>
<p>使用自定义的构造函数（与普通函数一样，只是用它来创建对象），定义对象类型（如：Person）的属性和方法。它与工厂方法区别在于：</p>
<ul>
<li>没有显式地创建对象；</li>
<li>直接将属性和方法赋值给了this对象；</li>
<li>没有return语句。</li>
</ul>
<p>此外，要创建Person的实例，必须使用new关键字，以Person函数为构造函数，传递参数完成对象创建；实际创建经过以下4个过程：</p>
<ol>
<li>创建一个对象；</li>
<li>将函数的作用域赋给新对象（因此this指向这个新对象，如：person1）；</li>
<li>执行构造函数的代码；</li>
<li>返回该对象。</li>
</ol>
<p>在前面例子的最后，person1和person2分别保存着Person的一个不同的实例。这两个对象都有一个<code>constructor</code>（构造函数）属性，该属性指向创建这个实例的函数对象，即Person，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(person1.constructor === Person);	 <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(person2.constructor === Person);	 <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>对象的constructor属性最初是用来标书对象类型的。针对对象类型的检测，还是instanceof操作符更可靠：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person);	<span class="comment">//true;</span></div><div class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);	<span class="comment">//true;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person2 <span class="keyword">instanceof</span> Person);	<span class="comment">//true;</span></div><div class="line"><span class="built_in">console</span>.log(person2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);	<span class="comment">//true;</span></div></pre></td></tr></table></figure>
<p>创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型——这正是构造函数模式胜过工厂模式的地方。</p>
<h5 id="1-将构造函数当做函数"><a href="#1-将构造函数当做函数" class="headerlink" title="1.将构造函数当做函数"></a>1.将构造函数当做函数</h5><p>构造函数与其他函数的唯一区别，就在于调用它们的方式不同。构造函数本身也是函数，不存在特殊定义特殊语法。任何函数，只要通过new操作符调用，那它就可以作为构造函数，反之，不通过new，那就跟普通函数没什么两样。如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当作构造函数使用</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Nicholas'</span>, <span class="number">29</span>, <span class="string">'SoftWare Engineer'</span>);</div><div class="line">person.sayName();	<span class="comment">//"Nicholas"</span></div><div class="line"></div><div class="line"><span class="comment">//当作普通函数调用，并且作用域在window上</span></div><div class="line">Person(<span class="string">'Greg'</span>,<span class="number">27</span>,<span class="string">'Doctor'</span>);</div><div class="line"><span class="built_in">window</span>.sayName();	<span class="comment">//"Greg"</span></div><div class="line"></div><div class="line"><span class="comment">//在另一个对象的作用域中调用</span></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line">Person.call(o, <span class="string">'chan'</span>, <span class="number">25</span>, <span class="string">'切图仔'</span>);</div><div class="line">o.sayName();	<span class="comment">//"chan"</span></div></pre></td></tr></table></figure>
<h5 id="2-构造函数的问题"><a href="#2-构造函数的问题" class="headerlink" title="2.构造函数的问题"></a>2.构造函数的问题</h5><p>构造函数模式虽然好用，但并非没有缺点。使用构造函数的主要问题，就是每个方法都要在每个实例上重新创建一遍。前面例子中，person1和person2都有一个名为sayName()的方法，但两个方法不是同一个Function的实例。不要忘了———ECMAScript中的函数是对象，因此每定义一个函数，也就是实例化了一个对象。所以上面代码可以主要定义：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.sayName = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'console.log(this.name)'</span>);	<span class="comment">//与声明函数在逻辑上是等价的</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码，创建多个实例时，会重复调用<code>new Function()</code>;创建多个函数实例，这些函数实例还不是一个作用域中，当然这一般不会有错，但这会造成内存浪费。当然，可以在函数中定义一个sayName = sayName的引用，而sayName函数在Person外定义，这样可以解决重复创建函数实例问题，但在效果上并没有起到封装的效果，如下所示：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.sayName = sayName;		<span class="comment">//指向外部全局函数的指针</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3、原型模式"><a href="#3、原型模式" class="headerlink" title="3、原型模式"></a>3、原型模式</h4><p>JS中每个函数都有一个<code>prototype</code>(原型)属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。按照字面意思理解，那么prototype就是通过调用构造函数而创建的那个对象实例的原型对象，即：它是所有通过new操作符使用函数创建的实例的原型对象。原型对象最大特点是，所有对象实例共享它所包含的属性和方法，换句话说，不必在构造函数中定义对象实例的信息，可以将这些信息直接添加到原型对象中，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 空的构造函数</span></div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">'Nicholas'</span>;<span class="comment">//使用原型来添加属性</span></div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(person1.sayName());		<span class="comment">//"Nicholas"</span></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(person1.sayName === person2.sayName);		<span class="comment">//true;共享一个原型对象的方法</span></div></pre></td></tr></table></figure>
<h5 id="1-理解原型对象"><a href="#1-理解原型对象" class="headerlink" title="1.理解原型对象"></a>1.理解原型对象</h5><p>无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。拿前面的例子来说，Person函数有一个prototype属性，Person.prototype有一个constructor属性，这个属性指向指向Person。如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Person.prototype <span class="comment">//Person &#123;name: "Nicholas", age: 29&#125;</span></div><div class="line">Person.prototype.constructor <span class="comment">//Person()</span></div><div class="line">Person.prototype.constructor == Person <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>创建自定义构造函数后，其原型对象默认只会取得constructor属性，其他属性都是从Object继承而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。ECMA-262第5版中管这个指针叫[[Prototype]]。虽然在脚本中没有标准的方式访问[[Prototype]]，但FF、Safari、Chrome都暴露了一个<code>__proto__</code>；不过，要明确真正重要的一点是，这个连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。</p>
<p>实例属性或方法的访问过程是一次搜索过程：</p>
<ul>
<li>首先从对象实例本身开始，如果找到属性就直接返回该属性值；</li>
<li>如果实例本身不存在要查找的属性，就继续搜索指针指向的原型对象，在其中查找给定名字的属性，如果有就返回。</li>
</ul>
<p>基于以上分析，原型模式创建的对象实例，其属性是共享原型对象的；但也可以自己实例中再进行定义，在查找时，就不从原型对象获取，而是根据搜索原则，得到本实例的返回；简单来说，就是实例中属性会屏蔽原型对象中的属性；</p>
<h5 id="2-原型与in操作符"><a href="#2-原型与in操作符" class="headerlink" title="2.原型与in操作符"></a>2.原型与in操作符</h5><p>一句话：无论原型中属性，还是对象实例的属性，都可以使用in操作符访问到；要想判断是否是实例本身的属性可以使用object.hasOwnProperty(‘attr’)来判断；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//空的</span></div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">'chan'</span>;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = <span class="string">'切图仔'</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">'name'</span>));	<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> person1);		<span class="comment">//true</span></div><div class="line"></div><div class="line">person1.name = <span class="string">'long'</span>;</div><div class="line"><span class="built_in">console</span>.log(person1.name);		<span class="comment">//"long"	————来自实例</span></div><div class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">'name'</span>));	<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> person1);		<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person2.name);		<span class="comment">//"chan"	————来自原型</span></div><div class="line"><span class="built_in">console</span>.log(person2.hasOwnProperty(<span class="string">'name'</span>));	<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> person2);		<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> person1.name;</div><div class="line"><span class="built_in">console</span>.log(person1.name);		<span class="comment">//"chan"	————实例属性已被删除，来自原型</span></div><div class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">'name'</span>));	<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> person1);		<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h5 id="3-原生对象中原型"><a href="#3-原生对象中原型" class="headerlink" title="3.原生对象中原型"></a>3.原生对象中原型</h5><p>原型模式的重要性不仅体现在创建自定义类型，就连所有原生的引用类型，都是采用这种模式创建的。所有原生引用类型（Object、Array、String、等等）都是其构造函数的原型上定义了方法。</p>
<p>原生对象中原型与普通对象的原型一样，可以添加/修改属性或方法，如以下代码为所有字符串对象添加去左右空白原型方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+/</span>,<span class="string">''</span>).replace(<span class="regexp">/\s+$/</span>,<span class="string">''</span>);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> str = <span class="string">'   word space   '</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'!'</span>+str.trim()+<span class="string">'!'</span>);	<span class="comment">//!word space!</span></div></pre></td></tr></table></figure>
<h5 id="4-原型对象的问题"><a href="#4-原型对象的问题" class="headerlink" title="4.原型对象的问题"></a>4.原型对象的问题</h5><p>原型模式的缺点，它省略了为构造函数传递初始化参数，这在一定程序带来不便；另外，最主要是当对象的属性是引用类型时，它的值是不变的，总是引用同一个外部对象，所有实例对该对象的操作都会其它实例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//空函数</span></div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">'Jack'</span>;</div><div class="line">Person.prototype.lessons = [<span class="string">'Math'</span>,<span class="string">'Physics'</span>];</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">person1.lessons.push(<span class="string">'Biology'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(person2.lessons);<span class="comment">//Math,Physics,Biology，person1修改影响了person2</span></div></pre></td></tr></table></figure>
<h4 id="4、组合构造函数及原型模式"><a href="#4、组合构造函数及原型模式" class="headerlink" title="4、组合构造函数及原型模式"></a>4、组合构造函数及原型模式</h4><p>目前最为常用的定义类型方式，是组合构造函数模式与原型模式。构造函数模式用于定义实例的属性，而原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方方法的引用，最大限度的节约内存。此外，组合模式还支持向构造函数传递参数，可谓是集两家之所长。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.friends = [<span class="string">'Shelby'</span>, <span class="string">'Court'</span>];</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="keyword">constructor</span>: Person,	//原型字面量方式会将对象的<span class="keyword">constructor</span>变为Object，此外强制指回Person</div><div class="line">    sayName: function()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">19</span>, <span class="string">'SoftWare Engneer'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Lily'</span>, <span class="number">39</span>, <span class="string">'Mechanical Engneer'</span>);</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">'Van'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person1.friends);	<span class="comment">//["Shelby", "Court", "Van"]</span></div><div class="line"><span class="built_in">console</span>.log(person2.friends);	<span class="comment">//["Shelby", "Court"]</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person1.friends === person2.friends);	<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(person1.sayName === person2.sayName);	<span class="comment">//true 共享原型中定义方法</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在所接触的JS库中，jQuery类型的封装就是使用组合模式来实例的！！！</p>
</blockquote>
<h4 id="5、动态原型模式"><a href="#5、动态原型模式" class="headerlink" title="5、动态原型模式"></a>5、动态原型模式</h4><p>组合模式中实例属性与共享方法（由原型定义）是分离的，这与纯面向对象语言不太一致；动态原型模式将所有构造信息都封装在构造函数中，又保持了组合的优点。其原理就是通过判断构造函数的原型中是否已经定义了共享的方法或属性，如果没有则定义，否则不再执行定义过程。该方式只原型上方法或属性只定义一次，且将所有构造过程都封装在构造函数中，对原型所做的修改能立即体现所有实例中：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.lessons = [<span class="string">'Math'</span>, <span class="string">'Physics'</span>];</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">'function'</span>) &#123;<span class="comment">//通过判断实例封装</span></div><div class="line">　　Person.prototype = &#123;</div><div class="line">　　　　<span class="keyword">constructor</span>: Person,//原型字面量方式会将对象的<span class="keyword">constructor</span>变为Object，此外强制指回Person</div><div class="line">　　　　sayName: function() &#123;</div><div class="line">　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">19</span>, <span class="string">'SoftWare Engneer'</span>);</div><div class="line">person1.lessons.push(<span class="string">'Biology'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Lily'</span>, <span class="number">39</span>, <span class="string">'Mechanical Engneer'</span>);</div><div class="line"><span class="built_in">console</span>.log(person1.lessons);<span class="comment">//Math,Physics,Biology</span></div><div class="line"><span class="built_in">console</span>.log(person2.lessons);<span class="comment">//Math,Physics</span></div><div class="line"><span class="built_in">console</span>.log(person1.sayName === person2.sayName);<span class="comment">//true,//共享原型中定义方法</span></div></pre></td></tr></table></figure>
<p>以上内容参考自《Javascript高级程序设计》第3版</p>
]]></content>
    
    <summary type="html">
    
      JS 面向对象的程序设计
    
    </summary>
    
      <category term="javascript" scheme="http://007sair.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://007sair.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>font-size</title>
    <link href="http://007sair.github.io/2015/09/15/font-size/"/>
    <id>http://007sair.github.io/2015/09/15/font-size/</id>
    <published>2015-09-14T16:00:00.000Z</published>
    <updated>2017-08-23T01:47:15.889Z</updated>
    
    <content type="html"><![CDATA[<p>汉字，¥10.123456789,font-family:默认</p><br><p style="font-family:'Helvetica Neue'">汉字，¥10.123456789,font-family:”Helvetica Neue”</p><br><p style="font-family:Helvetica">汉字，¥10.123456789,font-family:Helvetica</p><br><p style="font-family:STHeiTi">汉字，¥10.123456789,font-family:STHeiTi</p><br><p style="font-family:Arial">汉字，¥10.123456789,font-family:Arial</p><br><p style="font-family:'微软雅黑'">汉字，¥10.123456789,font-family:’微软雅黑’</p>]]></content>
    
    <summary type="html">
    
      测试字体在手机上的效果
    
    </summary>
    
      <category term="test" scheme="http://007sair.github.io/categories/test/"/>
    
    
      <category term="css" scheme="http://007sair.github.io/tags/css/"/>
    
      <category term="test" scheme="http://007sair.github.io/tags/test/"/>
    
  </entry>
  
</feed>
